{"version":3,"sources":["null","ng://crud/lib/services/registry.service.ts","ng://crud/lib/containers/listing-screen/listing-screen.component.ts","ng://crud/lib/services/navigator.service.ts","ng://crud/lib/containers/app-screen/app-screen.component.ts","ng://crud/lib/services/api.service.ts","ng://crud/lib/forms.ts","ng://crud/lib/components/form-field/form-field.component.ts","ng://crud/lib/components/model-form-screen/model-form-screen.component.ts","ng://crud/lib/screens.ts","ng://crud/lib/services/form.service.ts","ng://crud/lib/components/listing/listing.component.ts","ng://crud/lib/components/model-form/model-form.component.ts","ng://crud/lib/containers/listing-dialog/listing-dialog.component.ts","ng://crud/lib/components/formset/formset.component.ts","ng://crud/lib/components/auto-complete-field/auto-complete-field.component.ts","ng://crud/lib/components/foreign-key-field/foreign-key-field.component.ts","ng://crud/lib/crud.module.ts"],"names":["extendStatics","d","b","Object","setPrototypeOf","__proto__","Array","p","hasOwnProperty","__values","o","m","Symbol","iterator","i","call","next","length","value","done","Registry","BehaviorSubject","prototype","registerForm","metadata","formClass","ctrls","_a","tslib_1.__values","controls","_b","ctrl","name","FormControl","validators","f","FormGroup","this","forms","register","meta","registry","isReady","getModules","getModel","moduleName","app","key","apps","filter","a","models","getApp","getAppModels","Injectable","args","providedIn","ListingScreenComponent","reg","router","route","ngOnInit","_this","params","subscribe","parentParams","parent","snapshot","appName","modelName","Component","template","styles","Router","ActivatedRoute","Navigator","EventEmitter","AppScreenComponent","navigator","renderSidebar","firstChild","path","emit","navigate","items","item","title","label","type","push","forEach","verbose_name","url","navItems","ApiService","http","fetch","api","opts","HttpParams","keys","set","get","put","body","post","HttpClient","FOREIGN_MODEL","Field","is_editable","is_searchable","foreign_model","colors","value_type","Fieldset","Formset","AutoCompleteField","_super","__","constructor","create","tslib_1.__extends","DefaultCrudForm","model","v","console","log","ModelFormScreenComponent","snackbar","FieldType","module","id","mode","onSubmit","e","res","open","err","selector","exportAs","MatSnackBar","Module","App","Model","DefaultForm","ListingScreen","EditingScreen","FormService","toFormGroup","fields","fields_1","fields_1_1","field","control_type","toFormArray","_value","values","groups","map","g","emptyValues","fields_2","fields_2_1","setValue","FormArray","ListingComponent","MatTableDataSource","page","ngOnChanges","populateDataTable","prepareColumns","columns","columnDef","header","listing_fields","ff","col","element","external_name_field","displayColumns","c","resultsCount","dataSource","data","searchParams","newItems","results","concat","isLoading","getLink","cellClicked","columnName","row","onSearch","onChecked","onCheckAll","_picked","picked","Input","Output","ModelFormComponent","formService","form","_onSubmit","submit","buildForm","formsets","formset","fs","addControl","is_ready","ListingDialogComponent","ref","close","MatDialogRef","Inject","MAT_DIALOG_DATA","CHOICES","FormFieldComponent","dialog","changes","choices","foreign_model_path","split","modelPath","filteredOptions","of","valueChanges","pipe","startWith","debounceTime","distinctUntilChanged","switchMap","val","_filter","getFormControl","field_name","displayFn","option","CHOICES_1","CHOICES_1_1","Observable","filterValue","toLowerCase","openListingDialog","width","height","afterClosed","MatDialog","FormsetComponent","firstChange","currentValue","getChoices","addForm","config","formarray","AutoCompleteFieldComponent","observableOf","text","indexOf","valueFormatter","external_value_field","displayWith","ForeignKeyFieldComponent","formGroup","code","slice","CrudModule","NgModule","imports","CommonModule","FormsModule","ReactiveFormsModule","HttpClientModule","MomentModule","RouterModule","MatToolbarModule","MatSidenavModule","MatListModule","MatIconModule","MatTableModule","MatCardModule","MatPaginatorModule","MatButtonModule","MatMenuModule","MatProgressBarModule","MatFormFieldModule","MatInputModule","MatCheckboxModule","MatSlideToggleModule","MatGridListModule","MatSnackBarModule","MatDatepickerModule","MatNativeDateModule","MatSelectModule","MatTabsModule","MatExpansionModule","MatAutocompleteModule","declarations","providers","exports","entryComponents"],"mappings":"+7BAgBA,IAAIA,EAAgB,SAASC,EAAGC,GAI5B,OAHAF,EAAgBG,OAAOC,gBAClB,CAAEC,UAAW,cAAgBC,OAAS,SAAUL,EAAGC,GAAKD,EAAEI,UAAYH,IACvE,SAAUD,EAAGC,GAAK,IAAK,IAAIK,KAAKL,EAAOA,EAAEM,eAAeD,KAAIN,EAAEM,GAAKL,EAAEK,MACpDN,EAAGC,IAS5B,SAAAO,EA6EyBC,GACrB,IAAIC,EAAsB,mBAAXC,QAAyBF,EAAEE,OAAOC,UAAWC,EAAI,EAChE,OAAIH,EAAUA,EAAEI,KAAKL,GACd,CACHM,KAAM,WAEF,OADIN,GAAKI,GAAKJ,EAAEO,SAAQP,OAAI,GACrB,CAAEQ,MAAOR,GAAKA,EAAEI,KAAMK,MAAOT,sBChG9C,SAAAU,eAJ2C,iBACnB,gBACmB,IAAIC,EAAAA,iBAAyB,UAIxED,EAAAE,UAAAC,aAAA,SAAaC,EAAoBC,GAC/B,IAAMC,EAAQ,OACd,IAAmB,IAAAC,EAAAC,EAAAJ,EAASK,UAAQC,EAAAH,EAAAX,QAAAc,EAAAX,KAAAW,EAAAH,EAAAX,OAAA,CAA/B,IAAMe,EAAID,EAAAZ,MACbQ,EAAMK,EAAKC,MAAQ,IAAIC,EAAAA,YAAY,GAAIF,EAAKG,iHAE9C,QAAMC,EAAI,IAAIC,EAAAA,UAAUV,GACxBW,KAAKC,MAAMd,EAASQ,MAAQG,GAG9Bf,EAAAE,UAAAiB,SAAA,SAASC,GACPH,KAAKI,SAAWD,EAChBH,KAAKK,QAAQ1B,MAAK,IAGpBI,EAAAE,UAAAqB,WAAA,WACE,OAAON,KAAKI,UAGdrB,EAAAE,UAAAsB,SAAA,SAASC,EAAoBC,EAAaC,GACxC,OAAOV,KAAKI,SAASI,GAAYG,KAAKC,OAAO,SAACC,GAAW,OAAAA,EAAEH,MAAQD,IAAK,GACrEK,OAAOF,OAAO,SAAAtC,GAAK,OAAAA,EAAEoC,MAAQA,IAAK,IAGvC3B,EAAAE,UAAA8B,OAAA,SAAOP,EAAoBC,GACzB,OAAOT,KAAKI,SAASI,GAAYG,KAAKC,OAAO,SAAAC,GAAK,OAAAA,EAAEH,MAAQD,IAAK,IAGnE1B,EAAAE,UAAA+B,aAAA,SAAaR,EAAoBC,GAC/B,OAAOT,KAAKI,SAASI,GAAYG,KAAKC,OAAO,SAAAC,GAAK,OAAAA,EAAEH,MAAQD,IAAKK,4BAvCpEG,EAAAA,WAAUC,KAAA,CAAC,CACVC,WAAY,yJCRdC,EAAA,WAqBI,SAAAA,EACUC,EACAC,EACAC,GAFAvB,KAAAqB,IAAAA,EACArB,KAAAsB,OAAAA,EACAtB,KAAAuB,MAAAA,eAPQ,qBACG,oBACD,YAQpBH,EAAAnC,UAAAuC,SAAA,WAAA,IAAAC,EAAAzB,KAIEA,KAAKuB,MAAMG,OAAOC,UAAU,SAAAD,GAC1B,IAAME,EAAeH,EAAKF,MAAMM,OAAOC,SAASJ,OAChDD,EAAKjB,WAAaoB,EAAqB,OACvCH,EAAKM,QAAUH,EAAkB,IACjCH,EAAKO,UAAYN,EAAmB,kCA9B3CO,EAAAA,UAASf,KAAA,CAAC,CACTgB,SAAU,sLAOVC,OAAQ,CAAC,2MAVFpD,SAFiBqD,EAAAA,cAAjBC,EAAAA,oBADT,GCAAC,EAAA,WAcI,SAAAA,kBAJgC,IAAIC,EAAAA,gCACpB,eACe,IAAIA,EAAAA,wCAPtCtB,EAAAA,WAAUC,KAAA,CAAC,CACRC,WAAY,sJANhB,GCAAqB,EAAA,WAyBE,SAAAA,EACUnB,EACAC,EACAC,EACAkB,GAHAzC,KAAAqB,IAAAA,EACArB,KAAAsB,OAAAA,EACAtB,KAAAuB,MAAAA,EACAvB,KAAAyC,UAAAA,WARC,qBACE,iBACJ,UAUTD,EAAAvD,UAAAuC,SAAA,WACE,IAAME,EAAS1B,KAAKuB,MAAMO,SAASJ,OAMnC,GALA1B,KAAKQ,WAAakB,EAAe,OACjC1B,KAAKS,IAAMT,KAAKqB,IAAIN,OAAOf,KAAKQ,WAAYkB,EAAY,KACxD1B,KAAKc,OAASd,KAAKS,IAAIK,OAEvBd,KAAK0C,iBACA1C,KAAKuB,MAAMoB,WAId,OAFA3C,KAAKyC,UAAUG,KAAKC,KAAK,CAACnB,EAAe,OAAGA,EAAY,IAAG1B,KAAKc,OAAO,GAAGJ,WAC1EV,KAAKsB,OAAOwB,SAAS,CAAC,IAAIpB,EAAe,OAAKA,EAAY,IAAG1B,KAAKc,OAAO,GAAGJ,MAG9EV,KAAKyC,UAAUG,KAAKC,KAAK,CAACnB,EAAe,OAAGA,EAAY,IAAG1B,KAAKuB,MAAMoB,WAAWb,SAASJ,OAAmB,cAqB/Gc,EAAAvD,UAAAyD,cAAA,WAAA,IAAAjB,EAAAzB,KACQ+C,EAAQ,GACRC,EAAO,CAAEC,MAAOjD,KAAKS,IAAIyC,MAAOC,KAAM,cAC5CJ,EAAMK,KAAKJ,GACXhD,KAAKc,OAAOuC,QAAQ,SAAA/E,GAClB,IAAMG,EAAI,CAACwE,MAAU3E,EAAEgF,aAAY,IAAKC,IAAK,IAAI9B,EAAKjB,WAAU,IAAIiB,EAAKhB,IAAIC,IAAG,IAAIpC,EAAEoC,KACtFqC,EAAMK,KAAK3E,KAEbuB,KAAKyC,UAAUe,SAAS7E,KAAKoE,wBArEhCd,EAAAA,UAASf,KAAA,CAAC,CACTgB,SAAU,2OAUVC,OAAQ,CAAC,2MAdFpD,SAFgBqD,EAAAA,cAAhBC,EAAAA,sBAGAC,OAJT,GCAAmB,EAAA,WASI,SAAAA,EAAoBC,GAAA1D,KAAA0D,KAAAA,SAEbD,EAAAxE,UAAA0E,eAAMC,EAAalC,GACtB,IAAImC,EAAO,IAAIC,EAAAA,WAOf,OANAhG,OAAOiG,KAAKrC,GAAQ2B,QAAQ,SAAAnF,GACpBwD,EAAOxD,KACP2F,EAAOA,EAAKG,IAAI9F,EAAGwD,EAAOxD,OAI3B8B,KAAK0D,KAAKO,IAAIL,EAAK,CAAClC,OAAQmC,KAGhCJ,EAAAxE,UAAAiF,aAAIN,EAAaO,EAAMzC,QAAA,IAAAA,IAAAA,EAAA,IAC1B,IAAImC,EAAO,IAAIC,EAAAA,WAOf,OANAhG,OAAOiG,KAAKrC,GAAQ2B,QAAQ,SAAAnF,GACpBwD,EAAOxD,KACP2F,EAAOA,EAAKG,IAAI9F,EAAGwD,EAAOxD,OAI3B8B,KAAK0D,KAAKQ,IAAIN,EAAKO,EAAM,CAACzC,OAAQmC,KAGtCJ,EAAAxE,UAAAmF,cAAKR,EAAaO,EAAMzC,QAAA,IAAAA,IAAAA,EAAA,IAC3B,IAAImC,EAAO,IAAIC,EAAAA,WAOf,OANAhG,OAAOiG,KAAKrC,GAAQ2B,QAAQ,SAAAnF,GACpBwD,EAAOxD,KACP2F,EAAOA,EAAKG,IAAI9F,EAAGwD,EAAOxD,OAI3B8B,KAAK0D,KAAKU,KAAKR,EAAKO,EAAM,CAACzC,OAAQmC,yBArCjD5C,EAAAA,WAAUC,KAAA,CAAC,CACRC,WAAY,oDAJPkD,EAAAA,2IADT,8RC8BA,ICjBIC,EDiBJC,EAmBE,SACErB,EACAxC,EACAyC,EACAqB,EACAC,EACAC,EACAC,qBArBY,sBACE,kBACJ,eAOF,eACA,EAaR3E,KAAKU,IAAMA,EACXV,KAAKkD,MAAQA,EACblD,KAAK4E,WAAazB,EAClBnD,KAAKwE,YAAcA,EACnBxE,KAAKyE,cAAgBA,GAMzBI,+BAEgB,GAIhBC,eAKAC,EAAA,SAAAC,6EAEU,sBN1DV,SAA0BpH,EAAGC,GAEzB,SAAAoH,IAAgBjF,KAAKkF,YAActH,EADnCD,EAAcC,EAAGC,GAEjBD,EAAEqB,UAAkB,OAANpB,EAAaC,OAAOqH,OAAOtH,IAAMoH,EAAGhG,UAAYpB,EAAEoB,UAAW,IAAIgG,GMqDzCG,CAAAA,EAAAA,KAA1C,CAA0CxF,EAAAA,aAK1CyF,EAIE,SAAmBC,GAAnB,IAAA7D,EAAAzB,KAAmBA,KAAAsF,MAAAA,YAHL,iBACI,GAGdtF,KAAKL,KAAO2F,EAAM3F,KAClB7B,OAAOiG,KAAKuB,GAAOjC,QAAQ,SAAAkC,GACvBC,QAAQC,IAAIF,GACZ9D,EAAKjC,SAAS4D,KAAK,IAAIxD,EAAAA,YAAY,QE5F7C8F,EAAA,WAuDI,SAAAA,EAAoB9B,EACAvC,EACAC,EACAC,EACAoE,GAJA3F,KAAA4D,IAAAA,EACA5D,KAAAqB,IAAAA,EACArB,KAAAsB,OAAAA,EACAtB,KAAAuB,MAAAA,EACAvB,KAAA2F,SAAAA,UAZV,eACH,sBACQ,kBAEeC,sBACJ,gBAChB,UASVF,EAAAzG,UAAAuC,SAAA,WAAA,IAAAC,EAAAzB,KACIA,KAAKuB,MAAMM,OAAOH,OAAOC,UAAU,SAAAD,GAC/BD,EAAKoE,OAASnE,EAAe,OAC7BD,EAAKM,QAAUL,EAAY,MAE/B1B,KAAKuB,MAAMG,OAAOC,UAAU,SAAAD,GACxBD,EAAKO,UAAYN,EAAmB,WACpCD,EAAK6D,MAAQ7D,EAAKJ,IAAId,SAASkB,EAAKoE,OAAQpE,EAAKM,QAASN,EAAKO,WAC/DP,EAAKqE,GAAKpE,EAAW,GACN,MAAXD,EAAKqE,IAA0B,QAAZrE,EAAKqE,KACxBrE,EAAKsE,KAAO,WAKxBL,EAAAzG,UAAA+G,SAAA,SAASC,GAAT,IAAAxE,EAAAzB,MAEsB,SAAdA,KAAK+F,KACC/F,KAAK4D,IAAIM,IAAIlE,KAAKsF,MAAM1B,IAAM5D,KAAK8F,GAAK,IAAKG,GAE7CjG,KAAK4D,IAAIQ,KAAKpE,KAAKsF,MAAM1B,IAAKqC,IAEpCtE,UAAU,SAAAuE,GACVzE,EAAKkE,SAASQ,KAAK,qBAAsB,WACzC1E,EAAKH,OAAOwB,SAAS,CAACrB,EAAKoE,OAAQpE,EAAKM,QAASN,EAAKO,aACvD,SAAAoE,GACC3E,EAAKkE,SAASQ,KAAK,iBAAkB,kCA5EhDlE,EAAAA,UAASf,KAAA,CAAC,CACTmF,SAAU,4BACVnE,SAAU,2pCAuBVC,OAAQ,CAAC,uCAGTmE,SAAU,0EAlCH7C,SACA1E,SANgBqD,EAAAA,cAAhBC,EAAAA,sBACAkE,EAAAA,iBAFT,GCIAC,uBAEkB,IAGlBC,yBAIsB,IAGtBC,yBAIsB,iBACE,gBAKA,qBACK,qBACA,iBACN,IAGvBC,EACI,SAAmBrB,GAAAtF,KAAAsF,MAAAA,GAGvBsB,eAKAC,4BC/BE,SAAAC,YAEAA,EAAA7H,UAAA8H,YAAA,SAAYC,GACV,QAAMxH,EAAW,OACjB,IAAoB,IAAAyH,EAAA1H,EAAAyH,GAAME,EAAAD,EAAAtI,QAAAuI,EAAApI,KAAAoI,EAAAD,EAAAtI,OAAA,CAArB,IAAMwI,EAAKD,EAAArI,MACa,YAAvBsI,EAAMC,aACR5H,EAAS2H,EAAMzG,KAAOV,KAAKqH,YAAYF,EAAMH,OAAQG,EAAMG,QAE3D9H,EAAS2H,EAAMzG,KAAO,IAAId,EAAAA,YAAYuH,EAAMG,6GAGhD,OAAO,IAAIvH,EAAAA,UAAUP,IAGvBsH,EAAA7H,UAAAoI,YAAA,SAAYL,EAAiBO,GAA7B,IAAA9F,EAAAzB,KACOuH,IACHA,EAAS,IAEX,IAAMC,EAAsB,GAC5BD,EAAOlE,QAAQ,SAAAkC,GAEbyB,EAAOS,IAAI,SAAA3H,GACTA,EAAEwH,OAAS/B,EAAEzF,EAAEY,OAEHe,EAAKsF,YAAYC,GAC/BQ,EAAOpE,KAAKsE,KAGd,QAAMA,EAAI1H,KAAK+G,YAAYC,GACrBW,EAAc,OACpB,IAAgB,IAAAC,EAAArI,EAAAyH,GAAMa,EAAAD,EAAAjJ,QAAAkJ,EAAA/I,KAAA+I,EAAAD,EAAAjJ,OAAA,CACpBgJ,EADUE,EAAAhJ,MACI6B,KAAO,0GAIvB,OAFAgH,EAAEI,SAASH,GACXH,EAAOpE,KAAKsE,GACL,IAAIK,EAAAA,UAAUP,wBAxCxBvG,EAAAA,WAAUC,KAAA,CAAC,CACVC,WAAY,yJCNd6G,EAAA,WA8GI,SAAAA,EAAoBpE,EACAvC,EACAE,EACAD,GAHAtB,KAAA4D,IAAAA,EACA5D,KAAAqB,IAAAA,EACArB,KAAAuB,MAAAA,EACAvB,KAAAsB,OAAAA,YAjBJ,8BACC,kBAEJ,IAAI2G,EAAAA,qCACF,CACXC,KAAM,gBAGA,uBACiB,qBACZ,kBACH,cACO,IAAI3F,EAAAA,oBAOvByF,EAAA/I,UAAAkJ,YAAA,WACQnI,KAAKgC,WACLhC,KAAKoI,qBAILJ,EAAA/I,UAAAoJ,qCACc,SAAdrI,KAAK+F,KACL/F,KAAKsI,QAAU,CAAC,CAACC,UAAa,UAAWC,OAAU,KAEnDxI,KAAKsI,QAAU,GAEnBtI,KAAKsF,MAAMmD,eAAehB,IAAI,SAAAN,GAC1B,IAAMrH,EAAI2B,EAAK6D,MAAM0B,OAAOpG,OAAO,SAAA8H,GAAM,OAAAA,EAAGhI,MAAQyG,IAAO,GACrDwB,EAAM,GACZA,EAAe,UAAI7I,EAAEY,IACrBiI,EAAY,OAAI7I,EAAEoD,MAClByF,EAAU,KAAI,SAACC,GAAqB,MAAA,GAAGA,EAAQ9I,EAAEY,MAC7Ce,EAAK6D,MAAMuD,sBAAwB1B,IACnCwB,EAAe,WAAI,GAEvBlH,EAAK6G,QAAQlF,KAAKuF,KAEJ,SAAd3I,KAAK+F,MACL/F,KAAKsI,QAAQlF,KAAK,CAACmF,UAAa,UAAWC,OAAU,MAIrDR,EAAA/I,UAAAmJ,6BACJpI,KAAKsF,MAAQtF,KAAKqB,IAAId,SAASP,KAAKQ,WAAYR,KAAK+B,QAAS/B,KAAKgC,WACnEhC,KAAKqI,iBACLrI,KAAK8I,eAAiB9I,KAAKsI,QAAQb,IAAI,SAAAsB,GAAK,OAAAA,EAAER,YAC9CvI,KAAKgJ,aAAe,EACpBhJ,KAAKiJ,WAAWC,KAAO,GAEvBlJ,KAAKmJ,aAAe,CAACjB,KAAM,GAC3BlI,KAAK2D,SAGTqE,EAAA/I,UAAA0E,MAAA,WAAA,IAAAlC,EAAAzB,KACIA,KAAK4D,IAAID,MAAM3D,KAAKsF,MAAM1B,IAAK5D,KAAKmJ,cAAcxH,UAAU,SAAAuE,GACxD,IAAIkD,EAAW,GAEXA,EADAlD,EAAImD,QACO5H,EAAKwH,WAAWC,KAAKI,OAAOpD,EAAImD,SAEhC5H,EAAKwH,WAAWC,KAAKI,OAAOpD,GAE3CzE,EAAKuH,aAAeI,EAASxK,OAC7B6C,EAAKwH,WAAWC,KAAOE,EACvB3H,EAAK8H,WAAY,GAClB,SAAAnD,GACC3E,EAAK8H,WAAY,KAI1BvB,EAAA/I,UAAAuK,QAAA,SAAQ1D,GACJ,MAAO,CAAC,IAAK9F,KAAKQ,WAAYR,KAAK+B,QAAS/B,KAAKgC,UAAW8D,IAGhEkC,EAAA/I,UAAAwK,YAAA,SAAYC,EAAoBC,GACxBD,IAAe1J,KAAKsF,MAAMuD,qBAC1B7I,KAAKsB,OAAOwB,SAAS9C,KAAKwJ,QAAQG,EAAI7D,MAI7CkC,EAAA/I,UAAA2K,SAAA,SAAST,GACLnJ,KAAKuJ,WAAY,EACjBvJ,KAAKiJ,WAAWC,KAAO,GACvBlJ,KAAKgJ,aAAe,EACpBhJ,KAAKmJ,aAAeA,EACpBnJ,KAAKmJ,aAAajB,KAAO,EACzBlI,KAAK2D,SAGTqE,EAAA/I,UAAA4K,UAAA,SAAUF,GACNA,EAAgB,YAAI,GAGxB3B,EAAA/I,UAAA6K,WAAA,aAIA9B,EAAA/I,UAAA8K,QAAA,SAAQlL,GACJmB,KAAKgK,OAAOrL,KAAKE,wBA9LxBoD,EAAAA,UAASf,KAAA,CAAC,CACTmF,SAAU,kBACVnE,SAAU,8tHA8EVC,OAAQ,CAAC,yCACTmE,SAAU,gEArFH7C,SACA1E,SAJAsD,EAAAA,sBAAgBD,EAAAA,8CA4FpB6H,EAAAA,MAAK/I,KAAA,CAAC,+BACN+I,EAAAA,MAAK/I,KAAA,CAAC,8BACN+I,EAAAA,MAAK/I,KAAA,CAAC,2BACN+I,EAAAA,kCAEAA,EAAAA,sBAUAC,EAAAA,YA5GL,gBC2DI,SAAAC,EACYvG,EACAvC,EACA+I,GAFApK,KAAA4D,IAAAA,EACA5D,KAAAqB,IAAAA,EACArB,KAAAoK,YAAAA,YAjBI,iBACM,kBACP,kBAEexE,yBACgBb,cAC5B,gBACR,eACS,IAAIxC,EAAAA,uBACL,IAAIxC,EAAAA,UAAU,iBACX,IAAIgI,EAAAA,UAAU,kBACX,IAAI9J,qBACjB,SAUXkM,EAAAlL,UAAAkJ,YAAA,WACSnI,KAAK+B,SAAY/B,KAAKgC,WAAchC,KAAKQ,aAG9CR,KAAKqK,KAAOrK,KAAKqB,IAAIpB,MAAMD,KAAKgC,WAChCwD,QAAQC,IAAIzF,KAAKqK,QA0BrBF,EAAAlL,UAAAqL,UAAA,WACItK,KAAKuK,OAAO1H,KAAK7C,KAAKqK,KAAKxL,QAG/BsL,EAAAlL,UAAAuL,UAAA,SAAUjD,GASN,GARe,OAAXA,GACAvH,KAAKgH,OAAOS,IAAI,SAAA3H,GAEZ,OADAA,EAAEwH,OAASC,EAAOzH,EAAEY,KACbZ,IAGfE,KAAKqK,KAAOrK,KAAKoK,YAAYrD,YAAY/G,KAAKgH,QAE5B,WAAdhH,KAAK+F,MAAqB/F,KAAKsF,MAAMmF,aACrC,IAAsB,IAAAnL,EAAAC,EAAAS,KAAKsF,MAAMmF,UAAQhL,EAAAH,EAAAX,QAAAc,EAAAX,KAAAW,EAAAH,EAAAX,OAAA,CAApC,IAAM+L,EAAOjL,EAAAZ,MACR8L,EAAK3K,KAAKoK,YAAY/C,YAAYqD,EAAQ1D,OAAQO,EAAOmD,EAAQhK,MACvEV,KAAKyK,SAASrH,KAAKuH,GACnB3K,KAAKqK,KAAKO,WAAWF,EAAQhK,IAAKiK,gHAG1C3K,KAAK6K,UAAW,uBA3GvB5I,EAAAA,UAASf,KAAA,CAAC,CACTmF,SAAU,qBACVnE,SAAU,w8BAwBVC,OAAQ,CAAC,0FACTmE,SAAU,mEAjCH7C,SACA1E,SAEA+H,yCAkCJmD,EAAAA,uBACAA,EAAAA,yBACAA,EAAAA,oBACAA,EAAAA,kBACAA,EAAAA,sBAOAC,EAAAA,eCrDLY,EAAA,WAqBI,SAAAA,EACUzJ,EACA0J,EACwB7B,GAFxBlJ,KAAAqB,IAAAA,EACArB,KAAA+K,IAAAA,EACwB/K,KAAAkJ,KAAAA,SAGlC4B,EAAA7L,UAAAuC,SAAA,WACExB,KAAKQ,WAAaR,KAAKkJ,KAAiB,WACxClJ,KAAK+B,QAAU/B,KAAKkJ,KAAc,QAClClJ,KAAKgC,UAAYhC,KAAKkJ,KAAgB,WAGxC4B,EAAA7L,UAAA+K,OAAA,SAAOnL,GACL2G,QAAQC,IAAI,SAAU5G,GACtBmB,KAAK+K,IAAIC,MAAMnM,wBA7BpBoD,EAAAA,UAASf,KAAA,CAAC,CACTgB,SAAU,0NAMVC,OAAQ,CAAC,2MATFpD,SAFiBkM,EAAAA,gDAsBnBC,EAAAA,OAAMhK,KAAA,CAACiK,EAAAA,wBAxBd,GNYIC,EAAU,gBAqEZ,SAAAC,EAAoBC,EAA2B1H,EAAyBvC,GAApDrB,KAAAsL,OAAAA,EAA2BtL,KAAA4D,IAAAA,EAAyB5D,KAAAqB,IAAAA,0BAPrC,kBAKL,UAK9BgK,EAAApM,UAAAkJ,YAAA,SAAYoD,GAAZ,IAAA9J,EAAAzB,KACE,GAAgC,gBAA5BA,KAAKmH,MAAMC,aAAgC,CAC7C5B,QAAQC,IAAI,eAAgBzF,KAAKwL,SACjC,IAAM5I,EAAO5C,KAAKmH,MAAMsE,mBAAmBC,MAAM,KACjD1L,KAAK2L,UAAY/I,EACjB5C,KAAK0E,cAAgB1E,KAAKqB,IAAId,SAASqC,EAAK,GAAIA,EAAK,GAAIA,EAAK,IAC9D0B,EAAgBtE,KAAK0E,cACjB1E,KAAKwL,UACPhG,QAAQC,IAAI,iBACZzF,KAAK4L,gBAAkBC,EAAAA,GAAG7L,KAAKwL,UAMjC,IAAM9L,EAAOM,KAAKqK,KAAKpG,IAAIjE,KAAKmH,MAAMzG,KACtCV,KAAK4L,gBAAkBlM,EAAKoM,aAAaC,KACvCC,EAAAA,UAAU,IACVC,EAAAA,aAAa,KACbC,EAAAA,uBACAC,EAAAA,UAAU,SAAAC,GAAO,OAAA3K,EAAK4K,QAAQD,GAAO,WAS3Cf,EAAApM,UAAAqN,eAAA,SAAeC,GACb,OAAOvM,KAAKqK,KAAKpG,IAAIsI,IAGvBlB,EAAApM,UAAAuN,UAAA,SAAUC,OACR,IAAgB,IAAAC,EAAAnN,EAAA6L,GAAOuB,EAAAD,EAAA/N,QAAAgO,EAAA7N,KAAA6N,EAAAD,EAAA/N,OAAA,CAAlB,IAAMoK,EAAC4D,EAAA9N,MACV,GAAIkK,EAAM,KAAM0D,EACd,OAAO1D,EAAEzE,EAAmC,mIAMlD+G,EAAApM,UAAAoN,QAAA,SAAQxN,GACN,GAAqB,iBAAVA,EACT,OAAO,IAAI+N,EAAAA,WAEb,IAAMC,EAAchO,EAAQA,EAAMiO,cAAgB,KAC5CpL,EAAS,GAEf,OADAA,EAAO1B,KAAK0E,cAAcmE,qBAAuBgE,EAC1C7M,KAAK4D,IAAID,MAAM,GAAG3D,KAAK0E,cAAcd,IAAOlC,GAAQqK,KACzDtE,EAAAA,IAAI,SAAAvB,GAEA,OADAkF,EAAUlF,MAOlBmF,EAAApM,UAAA8N,kBAAA,WAAA,IAAAtL,EAAAzB,KACcA,KAAKsL,OAAOnF,KAAK2E,EAAwB,CACnDkC,MAAO,MACPC,OAAQ,MACR/D,KAAM,CACJ1I,WAAYR,KAAK2L,UAAU,GAC3B5J,QAAS/B,KAAK2L,UAAU,GACxB3J,UAAWhC,KAAK2L,UAAU,MAG1BuB,cAAcvL,UAAU,SAAA9C,GAC1B4C,EAAK4I,KAAKpG,IAAIxC,EAAK0F,MAAMzG,KAAKoH,SAASjJ,0BA1I5CoD,EAAAA,UAASf,KAAA,CAAC,CACTmF,SAAU,qBACVnE,SAAU,quEAmDVoE,SAAU,sBACVnE,OAAQ,CAAC,yFAjEFgL,EAAAA,iBAIA1J,SADA1E,mCAkENkL,EAAAA,kCACAA,EAAAA,qBACAA,EAAAA,uBACAA,EAAAA,2BOrCD,SAAAmD,EAAoBxJ,EAAyBvC,EAAuB+I,GAAhDpK,KAAA4D,IAAAA,EAAyB5D,KAAAqB,IAAAA,EAAuBrB,KAAAoK,YAAAA,eAF1D,UAKVgD,EAAAnO,UAAAkJ,YAAA,SAAYoD,GACV,GAAIA,EAAO,OAAQ8B,gBACjB,IAAoB,IAAA/N,EAAAC,EAAAgM,EAAO,OAAQ+B,aAAatG,QAAMvH,EAAAH,EAAAX,QAAAc,EAAAX,KAAAW,EAAAH,EAAAX,OAAA,CAAjD,IAAMwI,EAAK1H,EAAAZ,MACgB,gBAA1BsI,EAAoB,cACtBnH,KAAKuN,WAAWpG,iHAMxBiG,EAAAnO,UAAAuO,QAAA,WACE,IAAM9N,EAAOM,KAAKoK,YAAYrD,YAAY/G,KAAKyN,OAAOzG,QACtDhH,KAAK0N,UAAUtK,KAAK1D,IAGtB0N,EAAAnO,UAAAsO,WAAA,SAAWpG,GAAX,IAAA1F,EAAAzB,KACQ4C,EAAOuE,EAAMsE,mBAAmBC,MAAM,KACtCpG,EAAQtF,KAAKqB,IAAId,SAASqC,EAAK,GAAIA,EAAK,GAAIA,EAAK,IACvD5C,KAAK4D,IAAID,MAAM2B,EAAM1B,IAAK,IAAIjC,UAAU,SAAAuE,GACtCzE,EAAK+J,QAAQrE,EAAMzG,KAAOwF,EAC1BV,QAAQC,IAAIhE,EAAK+J,gCArDtBvJ,EAAAA,UAASf,KAAA,CAAC,CACTmF,SAAU,kBACVnE,SAAU,kwBAiBVC,OAAQ,CAAC,oFACTmE,SAAU,gEAxBH7C,SADA1E,SAEA+H,mCA2BNmD,EAAAA,qBACAA,EAAAA,yBACAA,EAAAA,sBACAA,EAAAA,cCpCH0D,EAAA,WAmCE,SAAAA,EAAoB/J,EAAyBvC,GAAzBrB,KAAA4D,IAAAA,EAAyB5D,KAAAqB,IAAAA,eAPnB,mBAEN,IAAIpD,aAQvB0P,EAAA1O,UAAAkJ,YAAA,WAAA,IAAA1G,EAAAzB,KACOA,KAAK0E,gBAGT1E,KAAKmJ,aAAe,CAACjB,KAAM,GAC3BlI,KAAKN,KAAOM,KAAKqK,KAAKpG,IAAIjE,KAAKmH,MAAMzG,KACrC8E,QAAQC,IAAI,oBAAqBzF,KAAKN,KAAKb,OAC3CmB,KAAK4L,gBAAkBgC,EAAAA,GAAa5N,KAAKwL,SACzCxL,KAAK4L,gBAAkB5L,KAAKN,KAAKoM,aAAaC,KAC5CC,EAAAA,UAAU,IACVvE,EAAAA,IAAI,SAAC2E,GAAgB,OAAA3K,EAAKb,OAAOwL,QAOtCuB,EAAA1O,UAAA2B,OAAA,SAAOiN,GAAP,IAAApM,EAAAzB,KACC,OAAOA,KAAKwL,QAAQ5K,OAAO,SAAA6L,GACzBjH,QAAQC,IAAIoI,GACZ,IAAMzB,EAAMK,EAAOhL,EAAKiD,cAAcmE,qBACtC,QAAOuD,GAAwD,IAAlDA,EAAIU,cAAcgB,QAAQD,EAAKf,kBAI/Ca,EAAA1O,UAAA8O,eAAA,SAAe7E,GACZ,MAAO,IAAIA,EAAKlJ,KAAKsF,MAAM0I,sBAAqB,KAAK9E,EAAKlJ,KAAKsF,MAAMuD,sBAGzE8E,EAAA1O,UAAAgP,YAAA,SAAYvJ,GACV,OAAO,SAAC1B,GACN,OAAOA,EAAK0B,EAAcmE,2CA3D/B5G,EAAAA,UAASf,KAAA,CAAC,CACTmF,SAAU,uBACVnE,SAAU,4cAQVoE,SAAU,qEAbH7C,SADA1E,oCAkBNkL,EAAAA,qBACAA,EAAAA,6BACAA,EAAAA,oBACAA,EAAAA,uBACAA,EAAAA,kCACAA,EAAAA,WA7BH,GCAAiE,EAAA,WA+BE,SAAAA,EAAoBtK,EAAyBvC,GAAzBrB,KAAA4D,IAAAA,EAAyB5D,KAAAqB,IAAAA,0BANV,gBAEzB,UAUV6M,EAAAjP,UAAAkJ,YAAA,WAAA,IAAA1G,EAAAzB,KACE,GAAKA,KAAKmO,UAAV,CAGA3I,QAAQC,IAAIzF,KAAKmO,UAAWnO,KAAKmH,MAAMzG,IAAKV,KAAKmO,UAAUlK,IAAIjE,KAAKmH,MAAMzG,MAC1EV,KAAK4L,gBAAmB5L,KAAKmO,UAAUlK,IAAIjE,KAAKmH,MAAMzG,KAAqBoL,aAAaC,KACpFC,EAAAA,UAAU,IACVvE,EAAAA,IAAI,SAAA5I,GAEA,OADA2G,QAAQC,IAAI5G,GACLA,EAAQA,EAAY,KAAIA,IAEnC4I,EAAAA,IAAI,SAAA2G,GAAQ,OAAAA,EAAO3M,EAAK4K,QAAQ1M,MAAQ8B,EAAK+J,QAAQ6C,WAEvD7I,QAAQC,IAAIzF,KAAKmO,WACjB,IAAMvL,EAAO5C,KAAKmH,MAAMsE,mBAAmBC,MAAM,KACjD1L,KAAKsF,MAAQtF,KAAKqB,IAAId,SAASqC,EAAK,GAAIA,EAAK,GAAIA,EAAK,IACtD5C,KAAK4D,IAAID,MAAM,GAAG3D,KAAKsF,MAAM1B,IAAO,IAAIjC,UAAU,SAAAuE,GAChDzE,EAAK+J,QAAUtF,MAIrBgI,EAAAjP,UAAAuN,UAAA,SAAUC,GACR,OAAOA,EAASA,EAAO2B,KAAO3B,GAGhCyB,EAAAjP,UAAAoN,QAAA,SAAQxN,GACN,IAAMgO,EAAchO,EAAMiO,cAG1B,OAFAtH,QAAQC,IAAIoH,GAEL7M,KAAKwL,QAAQ5K,OAAO,SAAA6L,GAAU,OAAmD,IAAnDA,EAAO2B,KAAKtB,cAAcgB,QAAQjB,0BAxD1E5K,EAAAA,UAASf,KAAA,CAAC,CACTmF,SAAU,4BACVnE,SAAU,2aALHuB,SADA1E,wCAkBNkL,EAAAA,kCACAA,EAAAA,qBACAA,EAAAA,WA1BH,GCAAqE,EAAA,oDA6CCC,EAAAA,SAAQrN,KAAA,CAAC,CACRsN,QAAS,CACPC,EAAAA,aACAC,EAAAA,YACAC,EAAAA,oBACAC,EAAAA,iBACAC,EAAAA,aACAC,EAAAA,aAEAC,EAAAA,iBACAC,EAAAA,iBACAC,EAAAA,cACAC,EAAAA,cACAC,EAAAA,eACAC,EAAAA,cACAC,EAAAA,mBACAC,EAAAA,gBACAC,EAAAA,cACAC,EAAAA,qBACAC,EAAAA,mBACAC,EAAAA,eACAC,EAAAA,kBACAC,EAAAA,qBACAC,EAAAA,kBACAC,EAAAA,kBACAC,EAAAA,oBACAC,EAAAA,oBACAC,EAAAA,gBACAC,EAAAA,cACAC,EAAAA,mBACAC,EAAAA,uBAEFC,aAAc,CACZhF,EACAsC,EACA3F,EACAmC,EACA3H,EACApB,EACAsE,EACA0H,EACAc,EACApD,GAEFwF,UAAW,GAEXC,QAAS,CACP3B,EAAAA,iBACAjB,EACAoB,EAAAA,iBACAC,EAAAA,iBACAC,EAAAA,cACAC,EAAAA,cACAC,EAAAA,eACAC,EAAAA,cACAC,EAAAA,mBACAC,EAAAA,gBACAC,EAAAA,cACAC,EAAAA,qBACAC,EAAAA,mBACAC,EAAAA,eACAC,EAAAA,kBACAC,EAAAA,qBACAC,EAAAA,kBACAC,EAAAA,kBACAE,EAAAA,oBACAD,EAAAA,oBACAE,EAAAA,gBACAC,EAAAA,cACAE,EAAAA,sBACAD,EAAAA,mBACA9E,EACArD,EACAmC,EACA3H,EACApB,EACAsE,EACA0H,EACAc,GAEFsC,gBAAiB,CACf1F,SA9HJ","sourcesContent":["/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    }\r\n    return __assign.apply(this, arguments);\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) if (e.indexOf(p[i]) < 0)\r\n            t[p[i]] = s[p[i]];\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nexport function __values(o) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator], i = 0;\r\n    if (m) return m.call(o);\r\n    return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\r\n    result.default = mod;\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n","import { Injectable, EventEmitter } from '@angular/core';\nimport { FormGroup, FormControl, Validators } from '@angular/forms';\nimport { Observable ,  Subject ,  BehaviorSubject } from 'rxjs';\nimport { Field, CrudForm } from '../forms';\nimport { App, Model } from '../screens';\n\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class Registry {\n\n  public forms: {[key: string]: FormGroup} = {};\n  private registry: any = {};\n  public isReady: BehaviorSubject<boolean> = new BehaviorSubject<boolean>(false);\n\n  constructor() {}\n\n  registerForm(metadata: CrudForm, formClass: any) {\n    const ctrls = {};\n    for (const ctrl of metadata.controls) {\n      ctrls[ctrl.name] = new FormControl({}, ctrl.validators);\n    }\n    const f = new FormGroup(ctrls);\n    this.forms[metadata.name] = f;\n  }\n\n  register(meta: {}) {\n    this.registry = meta;\n    this.isReady.next(true);\n  }\n\n  getModules() {\n    return this.registry;\n  }\n\n  getModel(moduleName: string, app: string, key: string): Model {\n    return this.registry[moduleName].apps.filter((a: App) => a.key === app)[0]\n      .models.filter(m => m.key === key)[0];\n  }\n\n  getApp(moduleName: string, app: string): App {\n    return this.registry[moduleName].apps.filter(a => a.key === app)[0];\n  }\n\n  getAppModels(moduleName: string, app: string): {string: Model} {\n    return this.registry[moduleName].apps.filter(a => a.key === app).models;\n  }\n\n}\n","import { Component, OnInit, Input } from '@angular/core';\nimport { ActivatedRoute , Router} from '@angular/router';\n\nimport { Registry } from '../../services/registry.service';\n\n@Component({\n  template: `<section class=\"app-settings\" *ngIf=\"modelName\">\n\n  <ng-crud-listing [modelName]=\"modelName\" [appName]=\"appName\" [moduleName]=\"moduleName\">\n\n  </ng-crud-listing>\n</section>\n`,\n  styles: [`#custom-header{padding-top:12px;margin-bottom:12px}.page-title a{color:#333}.mat-tab-nav-bar,mat-tab-nav-bar{border:none!important}.tabs-bar a{color:#fff}`]\n})\nexport class ListingScreenComponent implements OnInit {\n\n    appName: string = null;\n    moduleName: string = null;\n    modelName: string = null;\n\n    constructor(\n      private reg: Registry,\n      private router: Router,\n      private route: ActivatedRoute,\n    ) {}\n\n    ngOnInit() {\n      // keep listening for route params changes, in case of\n      // the model name changed, e.g: another model clicked from\n      // the nav menu\n      this.route.params.subscribe(params => {\n        const parentParams = this.route.parent.snapshot.params;\n        this.moduleName = parentParams['module'];\n        this.appName = parentParams['app'];\n        this.modelName = params['model_name'];\n      });\n    }\n\n}\n","import { Injectable, EventEmitter } from '@angular/core';\nimport { AbstractControl, FormGroup, FormControl, FormArray } from '@angular/forms';\nimport { Observable ,  Subject } from 'rxjs';\nimport { Field } from '../forms';\n\n@Injectable({\n    providedIn: 'root'\n})\nexport class Navigator {\n\n    navItems: EventEmitter<any[]> = new EventEmitter();\n    activeNavItem = null;\n    path: EventEmitter<string[]> = new EventEmitter<string[]>();\n\n    constructor() { }\n\n}\n","import { Component, OnInit, Input } from '@angular/core';\nimport { ActivatedRoute, Router } from '@angular/router';\n\nimport { Registry } from '../../services/registry.service';\nimport { Navigator } from '../../services/navigator.service';\n\n@Component({\n  template: `<section class=\"app-settings\">\n  \n  <!-- <mat-card>\n    <p class=\"mat-subheading-1\">Welcome to Cloudinn Settings</p>\n  </mat-card> -->\n  <div class=\"container\">\n    <router-outlet></router-outlet>\n  </div>\n</section>\n`,\n  styles: [`#custom-header{padding-top:12px;margin-bottom:12px}.page-title a{color:#333}.mat-tab-nav-bar,mat-tab-nav-bar{border:none!important}.tabs-bar a{color:#fff}`]\n})\nexport class AppScreenComponent implements OnInit {\n\n  app: any = null;\n  moduleName = null;\n  models = [];\n\n  constructor(\n    private reg: Registry,\n    private router: Router,\n    private route: ActivatedRoute,\n    private navigator: Navigator,\n  ) {\n  }\n\n  ngOnInit() {\n    const params = this.route.snapshot.params;\n    this.moduleName = params['module'];\n    this.app = this.reg.getApp(this.moduleName, params['app']);\n    this.models = this.app.models;\n\n    this.renderSidebar();\n    if (!this.route.firstChild) {\n      // this.renderSidebar();\n      this.navigator.path.emit([params['module'], params['app'], this.models[0].key]);\n      this.router.navigate([`/${params['module']}`, params['app'], this.models[0].key]);\n      return;\n    }\n    this.navigator.path.emit([params['module'], params['app'], this.route.firstChild.snapshot.params['model_name']]);\n\n    // this.route.params.subscribe(res => {\n    //   console.log(res);\n    // });\n    // console.log(this.route.firstChild.snapshot.params);\n\n    // if (!params['model_name']) {\n    //   this.renderSidebar();\n    //   // this.router.navigate([`/${params['module']}`, params['app'], this.models[0].key]);\n    //   return;\n    // }\n  }\n\n  // ngOnChanges() {\n  //   this.route.params.subscribe(params => {\n  //     this.moduleName = params['parent_app'];\n  //     this.app = this.reg.getApp(params['app']);\n  //     this.models = this.reg.getAppModels(params['app']);\n  //   });\n  // }\n  renderSidebar() {\n    const items = [];\n    const item = { title: this.app.label, type: 'subheading' };\n    items.push(item);\n    this.models.forEach(m => {\n      const i = {title: `${m.verbose_name}s`, url: `/${this.moduleName}/${this.app.key}/${m.key}` };\n      items.push(i);\n    });\n    this.navigator.navItems.next(items);\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { HttpClient, HttpParams } from '@angular/common/http';\nimport { Observable } from 'rxjs';\n\n@Injectable({\n    providedIn: 'root'\n})\nexport class ApiService {\n\n    constructor(private http: HttpClient) { }\n\n    public fetch(api: string, params?: any): Observable<any> {\n        let opts = new HttpParams();\n        Object.keys(params).forEach(p => {\n            if (params[p]) {\n                opts = opts.set(p, params[p]);\n            }\n        });\n\n        return this.http.get(api, {params: opts});\n    }\n\n    public put(api: string, body, params = {}): Observable<any> {\n        let opts = new HttpParams();\n        Object.keys(params).forEach(p => {\n            if (params[p]) {\n                opts = opts.set(p, params[p]);\n            }\n        });\n\n        return this.http.put(api, body, {params: opts});\n    }\n\n    public post(api: string, body, params = {}): Observable<any> {\n        let opts = new HttpParams();\n        Object.keys(params).forEach(p => {\n            if (params[p]) {\n                opts = opts.set(p, params[p]);\n            }\n        });\n\n        return this.http.post(api, body, {params: opts});\n    }\n\n}\n","import { FormControl } from '@angular/forms';\n\nexport interface BaseField {\n  label: string;\n}\n\nexport interface CrudField {\n  name: string;\n  label: string;\n  validators?: any[];\n}\n\nexport interface CrudForm {\n  name: string;\n  controls: CrudField[];\n}\n\nexport enum FieldType {\n  Text,\n  Number,\n  Date,\n  DateTime,\n  Time,\n  Boolean,\n  ForeignKey,\n  ManyToMany,\n  // FormSet,\n  File,\n}\n\nexport class Field implements BaseField {\n  key: string;\n  label: string;\n  value_type: string;\n  control_type: string;\n  is_editable = true;\n  is_searchable = true;\n  is_hidden = false;\n  // foreign key information\n  // foreign_model?: any = null; // evaluated in run time\n  foreign_model_path?: string;\n  // choices?: any[];\n  fields: Field[];\n  choices: any;\n  colspan = 1;\n  rowspan = 1;\n\n  _value: any;\n\n  constructor(\n    label: string,\n    key: string,\n    type: string,\n    is_editable?: boolean,\n    is_searchable?: boolean,\n    foreign_model?: any,\n    colors?: any\n  ) {\n    this.key = key;\n    this.label = label;\n    this.value_type = type;\n    this.is_editable = is_editable;\n    this.is_searchable = is_searchable;\n    // this.foreign_model = foreign_model;\n  }\n\n}\n\nexport class Fieldset implements BaseField {\n  label: string;\n  is_fieldset = true;\n  fields: Field[];\n}\n\nexport class Formset implements BaseField {\n  label: string;\n  model: any;\n}\n\nexport class AutoCompleteField<T> extends FormControl {\n  value: T;\n  label = 'some label';\n}\n\nexport class DefaultCrudForm implements CrudForm {\n  public name = '';\n  public controls = [];\n\n  constructor(public model: any) {\n      this.name = model.name;\n      Object.keys(model).forEach(v => {\n          console.log(v);\n          this.controls.push(new FormControl({}));\n      });\n  }\n}","import { Component, OnChanges, Input, SimpleChanges } from '@angular/core';\nimport { FormControl, AbstractControl } from '@angular/forms';\nimport { Observable, of } from 'rxjs';\nimport { map, startWith, debounceTime, distinctUntilChanged, switchMap } from 'rxjs/operators';\nimport { MatDialog } from '@angular/material/dialog';\n\nimport {  Model } from '../../screens';\nimport { Registry } from '../../services/registry.service';\nimport { ApiService } from '../../services/api.service';\nimport { Field } from '../../forms';\nimport { ListingDialogComponent } from '../../containers/listing-dialog/listing-dialog.component';\n\nlet CHOICES = [];\nlet FOREIGN_MODEL;\n\n@Component({\n  selector: 'ng-crud-form-field',\n  template: `<div [ngSwitch]=\"field.control_type\" class=\"form-field-wrapper\" [formGroup]=\"form\">\n\n    <div *ngSwitchCase=\"'switch'\">\n        <mat-slide-toggle matInput [formControlName]=\"field.key\">{{ field.label }}</mat-slide-toggle>\n    </div>\n\n    <mat-form-field *ngSwitchCase=\"'textarea'\">\n        <mat-label>{{ field.label }}</mat-label>\n        <textarea matInput matTextareaAutosize [formControlName]=\"field.key\"\n            [rows]=\"field.rowspan || 1\"></textarea>\n    </mat-form-field>\n\n    <mat-form-field *ngSwitchCase=\"'select'\">\n        <mat-label>{{ field.label }}</mat-label>\n        <mat-select [formControlName]=\"field.key\">\n            <mat-option></mat-option>\n            <mat-option [value]=\"c.value\" *ngFor=\"let c of field.choices\">\n                {{ c.label }}\n            </mat-option>\n        </mat-select>\n    </mat-form-field>\n\n    <mat-form-field *ngSwitchCase=\"'date'\">\n        <mat-label>{{ field.label }}</mat-label>\n        <input  matInput [formControlName]=\"field.key\"  [matDatepicker]=\"myDatepicker\" />\n        <mat-datepicker-toggle matSuffix [for]=\"myDatepicker\"></mat-datepicker-toggle>\n        <mat-datepicker #myDatepicker></mat-datepicker>\n    </mat-form-field>\n    \n    <ng-container *ngSwitchCase=\"'foreign_key'\">\n        <mat-form-field>\n            <mat-label>{{ field.label }}</mat-label>\n            <input type=\"text\" matInput [formControlName]=\"field.key\" [matAutocomplete]=\"auto\">\n        </mat-form-field>\n        <!-- <button mat-icon-button (click)=\"openListingDialog()\"><mat-icon>search</mat-icon></button> -->\n        \n        <mat-autocomplete #auto=\"matAutocomplete\" [displayWith]=\"displayFn\">\n            <mat-option *ngFor=\"let option of filteredOptions | async\" [value]=\"option[foreign_model.external_value_field]\">\n                {{ option[foreign_model.external_name_field] }}\n            </mat-option>\n        </mat-autocomplete>\n    </ng-container>\n\n    <!-- this fallsback from number and text -->\n    <mat-form-field *ngSwitchDefault>\n        <mat-label>{{ field.label }}</mat-label>\n        <input  matInput [formControlName]=\"field.key\"\n                [type]=\"field.control_type || field.value_type || 'text'\" />\n    </mat-form-field>\n\n</div>`,\n  exportAs: 'ngcrudui-form-field',\n  styles: ['.form-field-wrapper{margin-right:  24px}']\n})\nexport class FormFieldComponent implements OnChanges {\n\n  @Input() form: AbstractControl;\n  @Input() forcedSearchParams: any = [];\n  @Input() field: Field;\n  @Input() choices;\n  filteredOptions: Observable<any[]>;\n  foreign_model?: Model;\n  private modelPath: string[] = [];\n\n  constructor(private dialog: MatDialog, private api: ApiService, private reg: Registry) {\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    if (this.field.control_type === 'foreign_key') {\n      console.log('first change', this.choices);\n      const path = this.field.foreign_model_path.split('.');\n      this.modelPath = path;\n      this.foreign_model = this.reg.getModel(path[0], path[1], path[2]);\n      FOREIGN_MODEL = this.foreign_model;\n      if (this.choices) {\n        console.log('found choices');\n        this.filteredOptions = of(this.choices);\n      }\n      // this.api.fetch(`${this.foreign_model.api}`, []).subscribe(res => {\n      //   this.choices = res;\n      //   CHOICES = res;\n      // });\n      const ctrl = this.form.get(this.field.key);\n      this.filteredOptions = ctrl.valueChanges.pipe(\n        startWith(''),\n        debounceTime(200),\n        distinctUntilChanged(),\n        switchMap(val => this._filter(val || null))\n      );\n      // if (this.form.value[this.field.key]) {\n      //   console.log('setting ctrl value', this.form.value[this.field.key]);\n      //   ctrl.setValue(this.form.value[this.field.key]);\n      // }\n    }\n  }\n\n  getFormControl(field_name: string): FormControl {\n    return this.form.get(field_name) as FormControl;\n  }\n\n  displayFn(option) {\n    for (const c of CHOICES) {\n      if (c['id'] === option) {\n        return c[FOREIGN_MODEL['external_name_field']];\n      }\n    }\n    // return option ? option.code : option;\n  }\n\n  _filter(value: string): Observable<any[]> {\n    if (typeof value !== 'string') {\n      return new Observable();\n    }\n    const filterValue = value ? value.toLowerCase() : null;\n    const params = {};\n    params[this.foreign_model.external_name_field] = filterValue;\n    return this.api.fetch(`${this.foreign_model.api}`, params).pipe(\n      map(res => {\n          CHOICES = res;\n          return res;\n      })\n    );\n    // return this.choices.filter(option => option.code.toLowerCase().indexOf(filterValue) === 0);\n  }\n\n  openListingDialog() {\n    const ref = this.dialog.open(ListingDialogComponent, {\n      width: '90%',\n      height: '90%',\n      data: {\n        moduleName: this.modelPath[0],\n        appName: this.modelPath[1],\n        modelName: this.modelPath[2]\n      }\n    });\n    ref.afterClosed().subscribe(value => {\n      this.form.get(this.field.key).setValue(value);\n    });\n  }\n}\n","import { Component, OnInit, Input, Output, EventEmitter } from '@angular/core';\nimport { ActivatedRoute, Router } from '@angular/router';\nimport { MatSnackBar } from '@angular/material/snack-bar';\nimport { DataSource } from '@angular/cdk/collections';\nimport { Observable ,  BehaviorSubject } from 'rxjs';\n\nimport { ApiService } from '../../services/api.service';\nimport { Registry } from '../../services/registry.service';\n\n\nimport { FieldType, Field } from '../../forms';\n\n@Component({\n  selector: 'ng-crud-model-form-screen',\n  template: `<!-- <mat-progress-bar *ngIf=\"isLoading\" mode=\"query\"></mat-progress-bar> -->\n\n<!--<form>-->\n<div class=\"wrapper\">\n    <mat-toolbar>\n        <a routerLink=\"/\" mat-icon-button class=\"mat-caption\"><mat-icon>home</mat-icon></a>\n        <mat-icon>keyboard_arrow_right</mat-icon>\n        <a mat-button [routerLink]=\"'/'+module+'/'+appName\" class=\"mat-caption\">{{ appName }}</a>\n        <mat-icon>keyboard_arrow_right</mat-icon>\n        <a mat-button class=\"mat-caption\" [routerLink]=\"'/'+module+'/'+appName+'/'+modelName\">{{ model.verbose_name }}s</a>\n        <mat-icon>keyboard_arrow_right</mat-icon>\n        <span *ngIf=\"mode === 'edit'\" class=\"mat-caption\">{{ id }}</span>\n        <span *ngIf=\"mode === 'create'\" class=\"mat-caption\">Creating new {{ modelName }}</span>\n        <span class=\"toolbar-fill-remaining-space\"></span>\n    </mat-toolbar>\n\n    <mat-card>\n        <mat-card-content>\n            <ng-crud-model-form [moduleName]=\"module\" [appName]=\"appName\" [mode]='mode'\n                [modelName]=\"modelName\" (submit)=\"onSubmit($event)\" [id]=\"id\"></ng-crud-model-form>\n        </mat-card-content>\n    </mat-card>\n</div>`,\n  styles: [`.wrapper {\n    padding: 24px;\n  }`],\n  exportAs: 'ngcrudui-model-form-screen'\n})\nexport class ModelFormScreenComponent implements OnInit {\n\n    module: string;\n    appName: string;\n    modelName: string;\n    id: any = null;\n    mode = 'create';\n    ngModel: any = {};\n    model: any;\n    fieldType: typeof FieldType = FieldType;\n    editableFields: Field[] = [];\n    choices = {};\n\n    constructor(private api: ApiService,\n                private reg: Registry,\n                private router: Router,\n                private route: ActivatedRoute,\n                private snackbar: MatSnackBar,\n    ) {}\n\n    ngOnInit() {\n        this.route.parent.params.subscribe(params => {\n            this.module = params['module'];\n            this.appName = params['app'];\n        });\n        this.route.params.subscribe(params => {\n            this.modelName = params['model_name'];\n            this.model = this.reg.getModel(this.module, this.appName, this.modelName);\n            this.id = params['id'];\n            if (this.id != null && this.id !== 'new') {\n                this.mode = 'edit';\n            }\n        });\n   }\n\n    onSubmit(e) {\n        let req: Observable<any> = null;\n        if (this.mode === 'edit') {\n            req = this.api.put(this.model.api + this.id + '/', e);\n        } else {\n            req = this.api.post(this.model.api, e);\n        }\n        req.subscribe(res => {\n            this.snackbar.open('Saved Successfully', 'Dismiss');\n            this.router.navigate([this.module, this.appName, this.modelName]);\n        }, err => {\n            this.snackbar.open('Failed to save', 'Dismiss');\n        });\n   }\n\n}\n","import { FormGroup } from '@angular/forms';\nimport { Field } from './forms';\n\n\nexport class Module {\n    label: string;\n    apps: App[] = [];\n}\n\nexport class App {\n    key: string;\n    label: string;\n    icon: string;\n    models: Model[] = [];\n}\n\nexport class Model {\n    key: string;\n    api: string;\n    verbose_name: string;\n    fields: Field[] = [];\n    formsets: Field[] = [];\n    external_value_field: string;\n    external_name_field: string;\n    listing_fields: string[];\n\n    actions: string[] = [];\n    bulk_actions: string[] = [];\n    list_actions: string[] = [];\n    pageSize: Number = 20;\n}\n\nexport class DefaultForm {\n    constructor(public model: Model) {}\n}\n\nexport class ListingScreen {\n    model: Model;\n}\n\n\nexport class EditingScreen {\n    model: Model;\n}\n","import { Injectable, EventEmitter } from '@angular/core';\nimport { AbstractControl, FormGroup, FormControl, FormArray } from '@angular/forms';\nimport { Observable ,  Subject } from 'rxjs';\nimport { Field } from '../forms';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class FormService {\n\n  constructor() {}\n\n  toFormGroup(fields: Field[]): FormGroup {\n    const controls = {};\n    for (const field of fields) {\n      if (field.control_type === 'formset') {\n        controls[field.key] = this.toFormArray(field.fields, field._value);\n      } else {\n        controls[field.key] = new FormControl(field._value);\n      }\n    }\n    return new FormGroup(controls);\n  }\n\n  toFormArray(fields: Field[], values: any[]) {\n    if (!values) {\n      values = [];\n    }\n    const groups: FormGroup[] = [];\n    values.forEach(v => {\n      // assign value to fields\n      fields.map(f => {\n        f._value = v[f.key];\n      });\n      const group = this.toFormGroup(fields);\n      groups.push(g);\n    });\n    // always add an empty row\n    const g = this.toFormGroup(fields);\n    const emptyValues = {};\n    for (const f of fields) {\n      emptyValues[f.key] = null;\n    }\n    g.setValue(emptyValues);\n    groups.push(g);\n    return new FormArray(groups);\n  }\n\n}\n","import { Component, OnChanges, Input, Output, EventEmitter } from '@angular/core';\nimport { ActivatedRoute, Router } from '@angular/router';\nimport { MatTableDataSource } from '@angular/material/table';\n\nimport { ApiService } from '../../services/api.service';\nimport { Registry } from '../../services/registry.service';\nimport {  Model } from '../../screens';\n\n@Component({\n  selector: 'ng-crud-listing',\n  template: `<!-- <mat-toolbar>\n    <a routerLink=\"/\" mat-icon-button class=\"mat-caption\"><mat-icon>home</mat-icon></a>\n    <mat-icon>keyboard_arrow_right</mat-icon>\n    <a mat-button [routerLink]=\"'/'+moduleName+'/'+appName\" class=\"mat-caption\">{{ appName }}</a>\n    <mat-icon>keyboard_arrow_right</mat-icon>\n    <a mat-button class=\"mat-caption\">{{ model.verbose_name }}s</a>\n    <span class=\"toolbar-fill-remaining-space\"></span>\n    <a mat-button [routerLink]=\"'/'+moduleName+'/'+appName+'/'+modelName+'/new'\" color=\"primary\">Create</a>\n    &nbsp;\n    <button mat-button color=\"warn\" [matMenuTriggerFor]=\"menu\">Bulk Actions <mat-icon>arrow_drop_down</mat-icon></button>    \n    <mat-menu #menu=\"matMenu\" >\n        <button mat-menu-item>Delete</button>\n    </mat-menu>\n</mat-toolbar> -->\n\n<div class=\"row\" *ngIf=\"mode !== 'pick'\">\n    <span class=\"fill-remaining-space\"></span>\n    <button mat-button color=\"warn\" [matMenuTriggerFor]=\"menu\">Bulk Actions <mat-icon>arrow_drop_down</mat-icon></button>    \n    <mat-menu #menu=\"matMenu\" >\n        <button mat-menu-item>Delete</button>\n    </mat-menu>\n</div>\n\n<mat-expansion-panel>\n    <mat-expansion-panel-header>\n        <mat-panel-title>\n            <mat-icon>search</mat-icon>\n        </mat-panel-title>\n        <mat-panel-description>\n            Search and filter restults\n        </mat-panel-description>                \n    </mat-expansion-panel-header>\n\n    <ng-crud-model-form [moduleName]=\"moduleName\" [appName]=\"appName\" mode='search'\n                 [modelName]=\"modelName\" (submit)=\"onSearch($event)\"></ng-crud-model-form>\n\n</mat-expansion-panel>    \n\n<mat-progress-bar *ngIf=\"isLoading\" mode=\"query\"></mat-progress-bar>\n\n<mat-table [dataSource]=\"dataSource\">\n    <ng-container *ngFor=\"let column of columns\" [matColumnDef]=\"column.columnDef\">\n        <ng-template [ngIf]=\"column.columnDef === 'checked'\">\n            <mat-header-cell *matHeaderCellDef (click)=\"onCheckAll()\"><mat-checkbox></mat-checkbox></mat-header-cell>\n            <mat-cell *matCellDef=\"let row\"> <mat-checkbox></mat-checkbox> </mat-cell>\n        </ng-template>\n        <ng-template [ngIf]=\"column.columnDef !== 'checked' && column.columnDef !== 'actions'\">\n            <mat-header-cell *matHeaderCellDef>{{ column.header }}</mat-header-cell>\n            <mat-cell *matCellDef=\"let row\">\n                <!-- <a *ngIf=\"column.clickable; else normal\" [routerLink]=\"getLink(row.id)\">{{ column.cell(row) }}</a>\n                <ng-template #normal>{{ column.cell(row) }}</ng-template>     -->\n                <a class=\"clickable\" [routerLink]=\"[row.id]\" *ngIf=\"(mode !== 'pick' && column.columnDef === model.external_name_field); else normalCell\">\n                    {{ column.cell(row) }}\n                </a>\n                <ng-template #normalCell>\n                    {{ column.cell(row) }}\n                </ng-template>\n            </mat-cell>\n        </ng-template>\n        <ng-template [ngIf]=\"column.columnDef === 'actions'\">\n            <mat-header-cell *matHeaderCellDef>{{ column.header }}</mat-header-cell>\n            <mat-cell *matCellDef=\"let row\">\n                <button mat-button *ngFor=\"let action of model.list_actions\">\n                    {{ action }}\n                </button>\n            </mat-cell>\n            </ng-template>\n    </ng-container>\n\n    <mat-header-row *matHeaderRowDef=\"displayColumns\"></mat-header-row>\n    <mat-row  *matRowDef=\"let row; columns: displayColumns;\" [ngClass]=\"{'clickable': mode === 'pick'}\" (click)=\"_picked(row[this.model.external_value_field])\"></mat-row>\n</mat-table>\n\n<mat-paginator #paginator\n    [length]=\"resultsCount\"\n    [pageIndex]=\"searchParams.page - 1\"\n    [pageSize]=\"20\">\n</mat-paginator>`,\n  styles: [`.clickable{color:#00f;cursor:pointer}`],\n  exportAs: 'ngcrudui-listing'\n})\nexport class ListingComponent implements OnChanges {\n\n    @Input('moduleName') moduleName: string;\n    @Input('appName') appName: string;\n    @Input('modelName') modelName: string;\n    @Input() mode = 'normal'; // other modes: 'pick'\n    is_actions_set = false;\n    @Input() forcedSearchParams: any;\n    dataSource = new MatTableDataSource();\n    searchParams = {\n        page: 1,\n    };\n    model: Model;\n    columns = [];\n    displayColumns: string[] = [];\n    resultsCount = 0;\n    isLoading = true;\n    @Output() picked = new EventEmitter();\n\n    constructor(private api: ApiService,\n                private reg: Registry,\n                private route: ActivatedRoute,\n                private router: Router) {}\n\n    ngOnChanges() {\n        if (this.modelName) {\n            this.populateDataTable();\n        }\n   }\n\n    private prepareColumns() {\n        if (this.mode !== 'pick') {\n            this.columns = [{'columnDef': 'checked', 'header': ''}];\n        } else {\n            this.columns = [];\n        }\n        this.model.listing_fields.map(field => {\n            const f = this.model.fields.filter(ff => ff.key === field)[0];\n            const col = {};\n            col['columnDef'] = f.key;\n            col['header'] = f.label;\n            col['cell'] = (element: Element) => `${element[f.key]}`;\n            if (this.model.external_name_field === field) {\n                col['clickable'] = true;\n            }\n            this.columns.push(col);\n        });\n        if (this.mode !== 'pick') {\n            this.columns.push({'columnDef': 'actions', 'header': ''});\n        }\n    }\n\n    private populateDataTable() {\n        this.model = this.reg.getModel(this.moduleName, this.appName, this.modelName);\n        this.prepareColumns();\n        this.displayColumns = this.columns.map(c => c.columnDef);\n        this.resultsCount = 0;\n        this.dataSource.data = [];\n        // this.displayColumns.push('actions');\n        this.searchParams = {page: 1};\n        this.fetch();\n    }\n\n    fetch() {\n        this.api.fetch(this.model.api, this.searchParams).subscribe(res => {\n            let newItems = [];\n            if (res.results) {\n                newItems = this.dataSource.data.concat(res.results);\n            } else {\n                newItems = this.dataSource.data.concat(res);\n            }\n            this.resultsCount = newItems.length;\n            this.dataSource.data = newItems;\n            this.isLoading = false;\n        }, err => {\n            this.isLoading = false;\n        });\n    }\n\n   getLink(id): string[] {\n       return ['/', this.moduleName, this.appName, this.modelName, id];\n   }\n\n   cellClicked(columnName: string, row: any) {\n       if (columnName === this.model.external_name_field) {\n           this.router.navigate(this.getLink(row.id));\n       }\n   }\n\n    onSearch(searchParams) {\n        this.isLoading = true;\n        this.dataSource.data = [];\n        this.resultsCount = 0;\n        this.searchParams = searchParams;\n        this.searchParams.page = 1;\n        this.fetch();\n    }\n\n    onChecked(row) {\n        row['is_checked'] = true;\n    }\n\n    onCheckAll() {\n\n    }\n\n    _picked(value) {\n        this.picked.next(value);\n    }\n\n}\n","import { Component, OnChanges, Input, Output, EventEmitter } from '@angular/core';\nimport { AbstractControl, FormGroup, FormBuilder, FormControl, FormArray } from '@angular/forms';\nimport { DataSource } from '@angular/cdk/collections';\nimport { Observable ,  BehaviorSubject } from 'rxjs';\n\nimport { ApiService } from '../../services/api.service';\nimport { Registry } from '../../services/registry.service';\nimport { Model } from '../../screens';\nimport { FormService } from '../../services/form.service';\nimport { FieldType, Field, AutoCompleteField } from '../../forms';\n\n@Component({\n  selector: 'ng-crud-model-form',\n  template: `<!-- <mat-progress-bar *ngIf=\"isLoading\" mode=\"query\"></mat-progress-bar> -->\n\n<ng-template [ngIf]=\"is_ready\">\n    <!-- <div class=\"form-container\"> -->\n    <div class=\"row\">\n        <ng-container *ngFor=\"let field of fields\">\n            <ng-crud-form-field  [form]=\"form\" [field]=\"field\"></ng-crud-form-field>\n        </ng-container>\n    </div>\n\n\n    <div *ngFor=\"let formarray of formsets; let i=index\">\n        <mat-divider></mat-divider>\n        <ng-crud-formset  [model]=\"model\" [config]=\"model.formsets[i]\"  [formarray]=\"formarray\" [form]=\"form\"></ng-crud-formset>        \n    </div>\n\n    <div class=\"row\">\n        <button mat-raised-button color=\"primary\" class=\"submit-button\" (click)=\"_onSubmit()\">\n            <span *ngIf=\"mode === 'search'\">Search</span>\n            <span *ngIf=\"mode === 'create'\">Create</span>\n            <span *ngIf=\"mode === 'edit'\">Update</span>\n        </button>\n    </div>\n</ng-template>`,\n  styles: [`.row{display:flex;flex:1 1 auto;flex-flow:row wrap}.submit-button{align-self:flex-end}`],\n  exportAs: 'ngcrudui-model-form'\n})\nexport class ModelFormComponent implements OnChanges {\n\n    @Input() moduleName: string;\n    @Input() appName: string;\n    @Input() modelName: string;\n    @Input() mode = 'search';\n    @Input() id: number = null;\n    ngModel: any = {};\n    model: Model;\n    fieldType: typeof FieldType = FieldType;\n    AutoCompleteField: typeof AutoCompleteField = AutoCompleteField;\n    fields: Field[] = [];\n    choices = {};\n    @Output() submit = new EventEmitter<any>();\n    form: FormGroup = new FormGroup({});\n    formset: FormArray = new FormArray([]);\n    formsets: FormArray[] = new Array<FormArray>();\n    is_ready = false;\n\n    constructor(\n        private api: ApiService,\n        private reg: Registry,\n        private formService: FormService,\n    ) {\n\n    }\n\n    ngOnChanges() {\n        if (!this.appName || !this.modelName || !this.moduleName) {\n            return;\n        }\n        this.form = this.reg.forms[this.modelName];\n        console.log(this.form);\n        // this.model = this.reg.getModel(this.moduleName, this.appName, this.modelName);\n        // if (this.mode === 'search') {\n        //     this.fields = this.model.fields.filter((f: Field) => !(f.is_searchable === false));\n        //     this.buildForm(null);\n        // } else if (this.mode === 'edit') {\n        //     // edit mode\n        //     const api = `${this.model.api}${this.id}/`;\n        //     // remove the uneditable fields\n        //     this.fields = this.model.fields.filter(f => {\n        //         return !(f.is_editable === false);\n        //     });\n        //     this.api.fetch(api, {}).subscribe(res => {\n        //         this.buildForm(res);\n        //     });\n        // } else {\n        //     this.buildForm(null);\n        // }\n\n        // // if (this.model.form_type === 'formset') {\n        // //     this.formset = this.formService.toFormArray(this.fields, []);\n        // // } else {\n        // //     this.form = this.formService.toFormGroup(this.fields);\n        // // }\n    }\n\n    _onSubmit() {\n        this.submit.emit(this.form.value);\n    }\n\n    buildForm(values: any) {\n        if (values !== null) {\n            this.fields.map(f => {\n                f._value = values[f.key];\n                return f;\n            });\n        }\n        this.form = this.formService.toFormGroup(this.fields);\n        // Check if the model has formsets, render them beneath the main form\n        if (this.mode !== 'search' && this.model.formsets) {\n            for (const formset of this.model.formsets) {\n                const fs = this.formService.toFormArray(formset.fields, values[formset.key]);\n                this.formsets.push(fs);\n                this.form.addControl(formset.key, fs);\n            }\n        }\n        this.is_ready = true;\n    }\n\n}\n","import { Component, OnInit, Inject } from '@angular/core';\nimport { ActivatedRoute , Router} from '@angular/router';\nimport { MAT_DIALOG_DATA, MatDialogRef } from '@angular/material/dialog';\n\nimport { Registry } from '../../services/registry.service';\n\n@Component({\n  template: `<section class=\"app-settings\" *ngIf=\"modelName\">\n\n  <ng-crud-listing (picked)=\"picked($event)\" [modelName]=\"modelName\" [appName]=\"appName\" [moduleName]=\"moduleName\" mode=\"pick\">\n\n  </ng-crud-listing>\n</section>`,\n  styles: [`#custom-header{padding-top:12px;margin-bottom:12px}.page-title a{color:#333}.mat-tab-nav-bar,mat-tab-nav-bar{border:none!important}.tabs-bar a{color:#fff}`]\n})\nexport class ListingDialogComponent implements OnInit {\n\n    moduleName: string;\n    appName: string;\n    modelName: string;\n\n    constructor(\n      private reg: Registry,\n      private ref: MatDialogRef<ListingDialogComponent>,\n      @Inject(MAT_DIALOG_DATA) public data: any,\n    ) {}\n\n    ngOnInit() {\n      this.moduleName = this.data['moduleName'];\n      this.appName = this.data['appName'];\n      this.modelName = this.data['modelName'];\n    }\n\n    picked(value) {\n      console.log('picked', value);\n      this.ref.close(value);\n    }\n\n}\n","import { Component, OnChanges, Input, SimpleChanges } from '@angular/core';\nimport { FormGroup, FormArray } from '@angular/forms';\n\nimport {  Model } from '../../screens';\nimport { Registry } from '../../services/registry.service';\nimport { ApiService } from '../../services/api.service';\nimport { FormService } from '../../services/form.service';\nimport { Field } from '../../forms';\n\n@Component({\n  selector: 'ng-crud-formset',\n  template: `<div [formGroup]=\"form\" *ngIf=\"formarray\" class=\"formset\">\n    <div class=\"row\">\n        <h4> {{ config.label }}</h4>\n        <span class=\"spacer\"></span>\n        <button mat-icon-button (click)=\"addForm()\">\n            <mat-icon>add_circle</mat-icon>\n        </button>\n    </div>\n    <div [formArrayName]=\"config.key\">\n        <mat-grid-list gutterSize=\"12\" [cols]=\"config.fields.length\" rowHeight=\"60\"  *ngFor=\"let ctrl of formarray.controls; let i=index\" [formGroupName]=\"i\">\n            <mat-grid-tile  *ngFor=\"let f of config.fields\">\n                {{ f. key }}\n                <ng-crud-form-field [choices]=\"choices[f.key]\" [form]=\"ctrl\" [field]=\"f\"></ng-crud-form-field>\n            </mat-grid-tile>\n        </mat-grid-list>\n    </div>\n</div>`,\n  styles: [`.formset{padding-top:12px}.row{display:flex;flex:1 1 auto}.spacer{flex:1 1 auto}`],\n  exportAs: 'ngcrudui-formset'\n})\nexport class FormsetComponent implements OnChanges {\n\n  @Input() form: FormGroup;\n  @Input() model: Model;\n  @Input() formarray: FormArray;\n  @Input() config: Field;\n  choices = {};\n\n  constructor(private api: ApiService, private reg: Registry, private formService: FormService) {\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    if (changes.config.firstChange) {\n      for (const field of changes.config.currentValue.fields) {\n        if (field['control_type'] === 'foreign_key') {\n          this.getChoices(field);\n        }\n      }\n    }\n  }\n\n  addForm() {\n    const ctrl = this.formService.toFormGroup(this.config.fields);\n    this.formarray.push(ctrl);\n  }\n\n  getChoices(field: Field) {\n    const path = field.foreign_model_path.split('.');\n    const model = this.reg.getModel(path[0], path[1], path[2]);\n    this.api.fetch(model.api, {}).subscribe(res => {\n      this.choices[field.key] = res;\n      console.log(this.choices);\n    });\n  }\n}\n","import { Component, OnChanges, Input } from '@angular/core';\nimport { FormGroup, FormControl } from '@angular/forms';\nimport { Observable, of as observableOf } from 'rxjs';\nimport { startWith, map} from 'rxjs/operators';\n\nimport {  Model } from '../../screens';\nimport { Registry } from '../../services/registry.service';\nimport { ApiService } from '../../services/api.service';\nimport { Field } from '../../forms';\n\n@Component({\n  selector: 'ng-crud-autocomplete',\n  template: `<mat-form-field [formGroup]=\"form\">\n  <input type=\"text\" matInput [placeholder]=\"field.label\" [formControl]=\"ctrl\" [matAutocomplete]=\"auto\">\n  <mat-autocomplete #auto=\"matAutocomplete\" [displayWith]=\"displayWith(foreign_model)\">\n      <mat-option *ngFor=\"let c of filteredOptions | async\" [value]=\"c[foreign_model.external_value_field]\">\n        {{ c[foreign_model.external_name_field] }}\n      </mat-option>\n    </mat-autocomplete>\n</mat-form-field>`,\n  exportAs: 'ngcrudui-autocomplete'\n})\nexport class AutoCompleteFieldComponent implements OnChanges {\n\n  @Input() model: Model;\n  @Input() field: Field;\n  @Input() foreign_model: Model;\n  @Input() form: FormGroup;\n  @Input() choices: any[] = [];\n  @Input() forcedSearchParams: any;\n  dataSource: any[] = new Array();\n  searchParams: {};\n  filteredOptions: Observable<any[]>;\n  ctrl: FormControl;\n\n  constructor(private api: ApiService, private reg: Registry) {\n  }\n\n   ngOnChanges() {\n     if (!this.foreign_model) {\n       return;\n     }\n      this.searchParams = {page: 1};\n      this.ctrl = this.form.get(this.field.key) as FormControl;\n      console.log('foreign key value', this.ctrl.value);\n      this.filteredOptions = observableOf(this.choices);\n      this.filteredOptions = this.ctrl.valueChanges.pipe(\n        startWith(''),\n        map((val: string) => this.filter(val))\n      );\n      // this.api.fetch(this.model.api, this.searchParams).subscribe(res => {\n      //   this.dataSource.push(res['results']);\n      // });\n   }\n\n   filter(text: string): any[] {\n    return this.choices.filter(option => {\n      console.log(text);\n      const val = option[this.foreign_model.external_name_field];\n      return val ? val.toLowerCase().indexOf(text.toLowerCase()) === 0 : false;\n    });\n   }\n\n   valueFormatter(data: any): string {\n      return `(${data[this.model.external_value_field]}) ${data[this.model.external_name_field]}`;\n    }\n\n  displayWith(foreign_model) {\n    return (item: any): string => {\n      return item[foreign_model.external_name_field];\n    };\n  }\n}\n","import { Component, OnChanges, Input } from '@angular/core';\nimport { FormGroup, FormControl } from '@angular/forms';\nimport { Observable } from 'rxjs';\nimport { map, startWith } from 'rxjs/operators';\n\nimport {  Model } from '../../screens';\nimport { Registry } from '../../services/registry.service';\nimport { ApiService } from '../../services/api.service';\nimport { Field } from '../../forms';\n\n@Component({\n  selector: 'ng-crud-foreign-key-field',\n  template: `<mat-form-field>\n    <input type=\"text\" matInput [formControlName]=\"field.key\" [matAutocomplete]=\"auto\">\n</mat-form-field>\n\n<mat-autocomplete #auto=\"matAutocomplete\" [displayWith]=\"displayFn\">\n    <mat-option *ngFor=\"let option of choices\" [value]=\"option[model.external_value_field]\">\n        {{ option[model.external_name_field] }}\n    </mat-option>\n</mat-autocomplete>`\n})\nexport class ForeignKeyFieldComponent implements OnChanges {\n\n  @Input() formGroup: FormGroup;\n  @Input() forcedSearchParams: any = [];\n  @Input() field: Field;\n  choices = [];\n  filteredOptions:  Observable<any[]>;\n  model?: Model;\n\n  constructor(private api: ApiService, private reg: Registry) {\n  }\n\n//   ngOnInit() {\n//   }\n\n  ngOnChanges() {\n    if (!this.formGroup) {\n        return;\n    }\n    console.log(this.formGroup, this.field.key, this.formGroup.get(this.field.key));\n    this.filteredOptions = (this.formGroup.get(this.field.key) as FormControl).valueChanges.pipe(\n        startWith(''),\n        map(value => {\n            console.log(value);\n            return value ? value['code'] : value;\n        }),\n        map(code => code ? this._filter(name) : this.choices.slice())\n    );\n      console.log(this.formGroup);\n      const path = this.field.foreign_model_path.split('.');\n      this.model = this.reg.getModel(path[0], path[1], path[2]);\n      this.api.fetch(`${this.model.api}`, []).subscribe(res => {\n        this.choices = res;\n      });\n  }\n\n  displayFn(option) {\n    return option ? option.code : option;\n  }\n\n  _filter(value: string) {\n    const filterValue = value.toLowerCase();\n    console.log(filterValue);\n\n    return this.choices.filter(option => option.code.toLowerCase().indexOf(filterValue) === 0);\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { HttpClientModule } from '@angular/common/http';\nimport { RouterModule } from '@angular/router';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport { MomentModule } from 'ngx-moment';\n\nimport {\n  MatToolbarModule,\n  MatSidenavModule,\n  MatListModule,\n  MatIconModule,\n  MatTableModule,\n  MatCardModule,\n  MatPaginatorModule,\n  MatButtonModule,\n  MatMenuModule,\n  MatProgressBarModule,\n  MatFormFieldModule,\n  MatInputModule,\n  MatCheckboxModule,\n  MatSlideToggleModule,\n  MatGridListModule,\n  MatSnackBarModule,\n  MatDatepickerModule,\n  MatNativeDateModule,\n  MatSelectModule,\n  MatTabsModule,\n  MatExpansionModule,\n  MatAutocompleteModule,\n} from '@angular/material';\n\n\nimport { ListingComponent } from './components/listing/listing.component';\nimport { ModelFormComponent } from './components/model-form/model-form.component';\nimport { ModelFormScreenComponent } from './components/model-form-screen/model-form-screen.component';\nimport { FormFieldComponent } from './components/form-field/form-field.component';\nimport { FormsetComponent } from './components/formset/formset.component';\nimport { AutoCompleteFieldComponent } from './components/auto-complete-field/auto-complete-field.component';\nimport { ForeignKeyFieldComponent } from './components/foreign-key-field/foreign-key-field.component';\n\nimport { AppScreenComponent } from './containers/app-screen/app-screen.component';\nimport { ListingScreenComponent } from './containers/listing-screen/listing-screen.component';\nimport { ListingDialogComponent } from './containers/listing-dialog/listing-dialog.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    FormsModule,\n    ReactiveFormsModule,\n    HttpClientModule,\n    MomentModule,\n    RouterModule,\n    //\n    MatToolbarModule,\n    MatSidenavModule,\n    MatListModule,\n    MatIconModule,\n    MatTableModule,\n    MatCardModule,\n    MatPaginatorModule,\n    MatButtonModule,\n    MatMenuModule,\n    MatProgressBarModule,\n    MatFormFieldModule,\n    MatInputModule,\n    MatCheckboxModule,\n    MatSlideToggleModule,\n    MatGridListModule,\n    MatSnackBarModule,\n    MatDatepickerModule,\n    MatNativeDateModule,\n    MatSelectModule,\n    MatTabsModule,\n    MatExpansionModule,\n    MatAutocompleteModule,\n  ],\n  declarations: [\n    FormFieldComponent,\n    AutoCompleteFieldComponent,\n    ListingComponent,\n    ModelFormComponent,\n    AppScreenComponent,\n    ListingScreenComponent,\n    ModelFormScreenComponent,\n    FormsetComponent,\n    ForeignKeyFieldComponent,\n    ListingDialogComponent,\n  ],\n  providers: [\n  ],\n  exports: [\n    HttpClientModule,\n    AutoCompleteFieldComponent,\n    MatToolbarModule,\n    MatSidenavModule,\n    MatListModule,\n    MatIconModule,\n    MatTableModule,\n    MatCardModule,\n    MatPaginatorModule,\n    MatButtonModule,\n    MatMenuModule,\n    MatProgressBarModule,\n    MatFormFieldModule,\n    MatInputModule,\n    MatCheckboxModule,\n    MatSlideToggleModule,\n    MatGridListModule,\n    MatSnackBarModule,\n    MatNativeDateModule,\n    MatDatepickerModule,\n    MatSelectModule,\n    MatTabsModule,\n    MatAutocompleteModule,\n    MatExpansionModule,\n    FormFieldComponent,\n    ListingComponent,\n    ModelFormComponent,\n    AppScreenComponent,\n    ListingScreenComponent,\n    ModelFormScreenComponent,\n    FormsetComponent,\n    ForeignKeyFieldComponent,\n  ],\n  entryComponents: [\n    ListingDialogComponent\n  ]\n})\nexport class CrudModule { }\n"]}