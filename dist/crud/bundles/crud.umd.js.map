{"version":3,"file":"crud.umd.js.map","sources":[null,"ng://crud/lib/services/registry.service.ts","ng://crud/lib/containers/listing-screen/listing-screen.component.ts","ng://crud/lib/services/navigator.service.ts","ng://crud/lib/containers/app-screen/app-screen.component.ts","ng://crud/lib/services/api.service.ts","ng://crud/lib/forms.ts","ng://crud/lib/components/model-form-screen/model-form-screen.component.ts","ng://crud/lib/screens.ts","ng://crud/lib/services/form.service.ts","ng://crud/lib/components/listing/listing.component.ts","ng://crud/lib/components/model-form/model-form.component.ts","ng://crud/lib/containers/listing-dialog/listing-dialog.component.ts","ng://crud/lib/components/form-field/form-field.component.ts","ng://crud/lib/components/formset/formset.component.ts","ng://crud/lib/components/auto-complete-field/auto-complete-field.component.ts","ng://crud/lib/components/foreign-key-field/foreign-key-field.component.ts","ng://crud/lib/crud.module.ts"],"sourcesContent":["/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    }\r\n    return __assign.apply(this, arguments);\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) if (e.indexOf(p[i]) < 0)\r\n            t[p[i]] = s[p[i]];\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nexport function __values(o) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator], i = 0;\r\n    if (m) return m.call(o);\r\n    return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\r\n    result.default = mod;\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n","import { Injectable, EventEmitter } from '@angular/core';\nimport { FormGroup, FormControl, Validators } from '@angular/forms';\nimport { Observable ,  Subject ,  BehaviorSubject } from 'rxjs';\nimport { Field, CrudForm } from '../forms';\nimport { App, Model } from '../screens';\n\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class Registry {\n\n  public forms: {[key: string]: FormGroup} = {};\n  private registry: any = {};\n  public isReady: BehaviorSubject<boolean> = new BehaviorSubject<boolean>(false);\n\n  constructor() {}\n\n  registerForm(metadata: CrudForm, formClass: any) {\n    const ctrls = {};\n    for (const ctrl of metadata.controls) {\n      ctrls[ctrl.name] = new FormControl({}, ctrl.validators);\n    }\n    const f = new FormGroup(ctrls);\n    this.forms[metadata.name] = f;\n  }\n\n  register(meta: {}) {\n    this.registry = meta;\n    this.isReady.next(true);\n  }\n\n  getModules() {\n    return this.registry;\n  }\n\n  getModel(moduleName: string, app: string, key: string): Model {\n    return this.registry[moduleName].apps.filter((a: App) => a.key === app)[0]\n      .models.filter(m => m.key === key)[0];\n  }\n\n  getApp(moduleName: string, app: string): App {\n    return this.registry[moduleName].apps.filter(a => a.key === app)[0];\n  }\n\n  getAppModels(moduleName: string, app: string): {string: Model} {\n    return this.registry[moduleName].apps.filter(a => a.key === app).models;\n  }\n\n}\n","import { Component, OnInit, Input } from '@angular/core';\nimport { ActivatedRoute , Router} from '@angular/router';\n\nimport { Registry } from '../../services/registry.service';\n\n@Component({\n  template: `<section class=\"app-settings\" *ngIf=\"modelName\">\n\n  <ng-crud-listing [modelName]=\"modelName\" [appName]=\"appName\" [moduleName]=\"moduleName\">\n\n  </ng-crud-listing>\n</section>\n`,\n  styles: [`#custom-header{padding-top:12px;margin-bottom:12px}.page-title a{color:#333}.mat-tab-nav-bar,mat-tab-nav-bar{border:none!important}.tabs-bar a{color:#fff}`]\n})\nexport class ListingScreenComponent implements OnInit {\n\n    appName: string = null;\n    moduleName: string = null;\n    modelName: string = null;\n\n    constructor(\n      private reg: Registry,\n      private router: Router,\n      private route: ActivatedRoute,\n    ) {}\n\n    ngOnInit() {\n      // keep listening for route params changes, in case of\n      // the model name changed, e.g: another model clicked from\n      // the nav menu\n      this.route.params.subscribe(params => {\n        const parentParams = this.route.parent.snapshot.params;\n        this.moduleName = parentParams['module'];\n        this.appName = parentParams['app'];\n        this.modelName = params['model_name'];\n      });\n    }\n\n}\n","import { Injectable, EventEmitter } from '@angular/core';\nimport { AbstractControl, FormGroup, FormControl, FormArray } from '@angular/forms';\nimport { Observable ,  Subject } from 'rxjs';\nimport { Field } from '../forms';\n\n@Injectable({\n    providedIn: 'root'\n})\nexport class Navigator {\n\n    navItems: EventEmitter<any[]> = new EventEmitter();\n    activeNavItem = null;\n    path: EventEmitter<string[]> = new EventEmitter<string[]>();\n\n    constructor() { }\n\n}\n","import { Component, OnInit, Input } from '@angular/core';\nimport { ActivatedRoute, Router } from '@angular/router';\n\nimport { Registry } from '../../services/registry.service';\nimport { Navigator } from '../../services/navigator.service';\n\n@Component({\n  template: `<section class=\"app-settings\">\n  \n  <!-- <mat-card>\n    <p class=\"mat-subheading-1\">Welcome to Cloudinn Settings</p>\n  </mat-card> -->\n  <div class=\"container\">\n    <router-outlet></router-outlet>\n  </div>\n</section>\n`,\n  styles: [`#custom-header{padding-top:12px;margin-bottom:12px}.page-title a{color:#333}.mat-tab-nav-bar,mat-tab-nav-bar{border:none!important}.tabs-bar a{color:#fff}`]\n})\nexport class AppScreenComponent implements OnInit {\n\n  app: any = null;\n  moduleName = null;\n  models = [];\n\n  constructor(\n    private reg: Registry,\n    private router: Router,\n    private route: ActivatedRoute,\n    private navigator: Navigator,\n  ) {\n  }\n\n  ngOnInit() {\n    const params = this.route.snapshot.params;\n    this.moduleName = params['module'];\n    this.app = this.reg.getApp(this.moduleName, params['app']);\n    this.models = this.app.models;\n\n    this.renderSidebar();\n    if (!this.route.firstChild) {\n      // this.renderSidebar();\n      this.navigator.path.emit([params['module'], params['app'], this.models[0].key]);\n      this.router.navigate([`/${params['module']}`, params['app'], this.models[0].key]);\n      return;\n    }\n    this.navigator.path.emit([params['module'], params['app'], this.route.firstChild.snapshot.params['model_name']]);\n\n    // this.route.params.subscribe(res => {\n    //   console.log(res);\n    // });\n    // console.log(this.route.firstChild.snapshot.params);\n\n    // if (!params['model_name']) {\n    //   this.renderSidebar();\n    //   // this.router.navigate([`/${params['module']}`, params['app'], this.models[0].key]);\n    //   return;\n    // }\n  }\n\n  // ngOnChanges() {\n  //   this.route.params.subscribe(params => {\n  //     this.moduleName = params['parent_app'];\n  //     this.app = this.reg.getApp(params['app']);\n  //     this.models = this.reg.getAppModels(params['app']);\n  //   });\n  // }\n  renderSidebar() {\n    const items = [];\n    const item = { title: this.app.label, type: 'subheading' };\n    items.push(item);\n    this.models.forEach(m => {\n      const i = {title: `${m.verbose_name}s`, url: `/${this.moduleName}/${this.app.key}/${m.key}` };\n      items.push(i);\n    });\n    this.navigator.navItems.next(items);\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { HttpClient, HttpParams } from '@angular/common/http';\nimport { Observable } from 'rxjs';\n\n@Injectable({\n    providedIn: 'root'\n})\nexport class ApiService {\n\n    constructor(private http: HttpClient) { }\n\n    public fetch(api: string, params?: any): Observable<any> {\n        let opts = new HttpParams();\n        Object.keys(params).forEach(p => {\n            if (params[p]) {\n                opts = opts.set(p, params[p]);\n            }\n        });\n\n        return this.http.get(api, {params: opts});\n    }\n\n    public put(api: string, body, params = {}): Observable<any> {\n        let opts = new HttpParams();\n        Object.keys(params).forEach(p => {\n            if (params[p]) {\n                opts = opts.set(p, params[p]);\n            }\n        });\n\n        return this.http.put(api, body, {params: opts});\n    }\n\n    public post(api: string, body, params = {}): Observable<any> {\n        let opts = new HttpParams();\n        Object.keys(params).forEach(p => {\n            if (params[p]) {\n                opts = opts.set(p, params[p]);\n            }\n        });\n\n        return this.http.post(api, body, {params: opts});\n    }\n\n}\n","import { FormControl } from '@angular/forms';\n\nexport interface BaseField {\n  label: string;\n}\n\nexport interface CrudField {\n  name: string;\n  label: string;\n  validators?: any[];\n}\n\nexport interface CrudForm {\n  name: string;\n  controls: CrudField[];\n}\n\nexport enum FieldType {\n  Text,\n  Number,\n  Date,\n  DateTime,\n  Time,\n  Boolean,\n  ForeignKey,\n  ManyToMany,\n  // FormSet,\n  File,\n}\n\nexport class Field implements BaseField {\n  key: string;\n  label: string;\n  value_type: string;\n  control_type: string;\n  is_editable = true;\n  is_searchable = true;\n  is_hidden = false;\n  // foreign key information\n  // foreign_model?: any = null; // evaluated in run time\n  foreign_model_path?: string;\n  // choices?: any[];\n  fields: Field[];\n  choices: any;\n  colspan = 1;\n  rowspan = 1;\n\n  _value: any;\n\n  constructor(\n    label: string,\n    key: string,\n    type: string,\n    is_editable?: boolean,\n    is_searchable?: boolean,\n    foreign_model?: any,\n    colors?: any\n  ) {\n    this.key = key;\n    this.label = label;\n    this.value_type = type;\n    this.is_editable = is_editable;\n    this.is_searchable = is_searchable;\n    // this.foreign_model = foreign_model;\n  }\n\n}\n\nexport class Fieldset implements BaseField {\n  label: string;\n  is_fieldset = true;\n  fields: Field[];\n}\n\nexport class Formset implements BaseField {\n  label: string;\n  model: any;\n}\n\nexport class AutoCompleteField<T> extends FormControl {\n  value: T;\n  label = 'some label';\n}\n\nexport class DefaultCrudForm implements CrudForm {\n  public name = '';\n  public controls = [];\n\n  constructor(public model: any) {\n      this.name = model.name;\n      Object.keys(model).forEach(v => {\n          console.log(v);\n          this.controls.push(new FormControl({}));\n      });\n  }\n}","import { Component, OnInit, Input, Output, EventEmitter } from '@angular/core';\nimport { ActivatedRoute, Router } from '@angular/router';\nimport { MatSnackBar } from '@angular/material/snack-bar';\nimport { DataSource } from '@angular/cdk/collections';\nimport { Observable ,  BehaviorSubject } from 'rxjs';\n\nimport { ApiService } from '../../services/api.service';\nimport { Registry } from '../../services/registry.service';\n\n\nimport { FieldType, Field } from '../../forms';\n\n@Component({\n  selector: 'ng-crud-model-form-screen',\n  template: `<!-- <mat-progress-bar *ngIf=\"isLoading\" mode=\"query\"></mat-progress-bar> -->\n\n<!--<form>-->\n<div class=\"wrapper\">\n    <mat-toolbar>\n        <a routerLink=\"/\" mat-icon-button class=\"mat-caption\"><mat-icon>home</mat-icon></a>\n        <mat-icon>keyboard_arrow_right</mat-icon>\n        <a mat-button [routerLink]=\"'/'+module+'/'+appName\" class=\"mat-caption\">{{ appName }}</a>\n        <mat-icon>keyboard_arrow_right</mat-icon>\n        <a mat-button class=\"mat-caption\" [routerLink]=\"'/'+module+'/'+appName+'/'+modelName\">{{ model.verbose_name }}s</a>\n        <mat-icon>keyboard_arrow_right</mat-icon>\n        <span *ngIf=\"mode === 'edit'\" class=\"mat-caption\">{{ id }}</span>\n        <span *ngIf=\"mode === 'create'\" class=\"mat-caption\">Creating new {{ modelName }}</span>\n        <span class=\"toolbar-fill-remaining-space\"></span>\n    </mat-toolbar>\n\n    <mat-card>\n        <mat-card-content>\n            <ng-crud-model-form [moduleName]=\"module\" [appName]=\"appName\" [mode]='mode'\n                [modelName]=\"modelName\" (submit)=\"onSubmit($event)\" [id]=\"id\"></ng-crud-model-form>\n        </mat-card-content>\n    </mat-card>\n</div>`,\n  styles: [`.wrapper {\n    padding: 24px;\n  }`],\n  exportAs: 'ngcrudui-model-form-screen'\n})\nexport class ModelFormScreenComponent implements OnInit {\n\n    module: string;\n    appName: string;\n    modelName: string;\n    id: any = null;\n    mode = 'create';\n    ngModel: any = {};\n    model: any;\n    fieldType: typeof FieldType = FieldType;\n    editableFields: Field[] = [];\n    choices = {};\n\n    constructor(private api: ApiService,\n                private reg: Registry,\n                private router: Router,\n                private route: ActivatedRoute,\n                private snackbar: MatSnackBar,\n    ) {}\n\n    ngOnInit() {\n        this.route.parent.params.subscribe(params => {\n            this.module = params['module'];\n            this.appName = params['app'];\n        });\n        this.route.params.subscribe(params => {\n            this.modelName = params['model_name'];\n            this.model = this.reg.getModel(this.module, this.appName, this.modelName);\n            this.id = params['id'];\n            if (this.id != null && this.id !== 'new') {\n                this.mode = 'edit';\n            }\n        });\n   }\n\n    onSubmit(e) {\n        let req: Observable<any> = null;\n        if (this.mode === 'edit') {\n            req = this.api.put(this.model.api + this.id + '/', e);\n        } else {\n            req = this.api.post(this.model.api, e);\n        }\n        req.subscribe(res => {\n            this.snackbar.open('Saved Successfully', 'Dismiss');\n            this.router.navigate([this.module, this.appName, this.modelName]);\n        }, err => {\n            this.snackbar.open('Failed to save', 'Dismiss');\n        });\n   }\n\n}\n","import { FormGroup } from '@angular/forms';\nimport { Field } from './forms';\n\n\nexport class Module {\n    label: string;\n    apps: App[] = [];\n}\n\nexport class App {\n    key: string;\n    label: string;\n    icon: string;\n    models: Model[] = [];\n}\n\nexport class Model {\n    key: string;\n    api: string;\n    verbose_name: string;\n    fields: Field[] = [];\n    formsets: Field[] = [];\n    external_value_field: string;\n    external_name_field: string;\n    listing_fields: string[];\n\n    actions: string[] = [];\n    bulk_actions: string[] = [];\n    list_actions: string[] = [];\n    pageSize: Number = 20;\n}\n\nexport class DefaultForm {\n    constructor(public model: Model) {}\n}\n\nexport class ListingScreen {\n    model: Model;\n}\n\n\nexport class EditingScreen {\n    model: Model;\n}\n","import { Injectable, EventEmitter } from '@angular/core';\nimport { AbstractControl, FormGroup, FormControl, FormArray } from '@angular/forms';\nimport { Observable ,  Subject } from 'rxjs';\nimport { Field } from '../forms';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class FormService {\n\n  constructor() {}\n\n  toFormGroup(fields: Field[]): FormGroup {\n    const controls = {};\n    for (const field of fields) {\n      if (field.control_type === 'formset') {\n        controls[field.key] = this.toFormArray(field.fields, field._value);\n      } else {\n        controls[field.key] = new FormControl(field._value);\n      }\n    }\n    return new FormGroup(controls);\n  }\n\n  toFormArray(fields: Field[], values: any[]) {\n    if (!values) {\n      values = [];\n    }\n    const groups: FormGroup[] = [];\n    values.forEach(v => {\n      // assign value to fields\n      fields.map(f => {\n        f._value = v[f.key];\n      });\n      const group = this.toFormGroup(fields);\n      groups.push(g);\n    });\n    // always add an empty row\n    const g = this.toFormGroup(fields);\n    const emptyValues = {};\n    for (const f of fields) {\n      emptyValues[f.key] = null;\n    }\n    g.setValue(emptyValues);\n    groups.push(g);\n    return new FormArray(groups);\n  }\n\n}\n","import { Component, OnChanges, Input, Output, EventEmitter } from '@angular/core';\nimport { ActivatedRoute, Router } from '@angular/router';\nimport { MatTableDataSource } from '@angular/material/table';\n\nimport { ApiService } from '../../services/api.service';\nimport { Registry } from '../../services/registry.service';\nimport {  Model } from '../../screens';\n\n@Component({\n  selector: 'ng-crud-listing',\n  template: `<!-- <mat-toolbar>\n    <a routerLink=\"/\" mat-icon-button class=\"mat-caption\"><mat-icon>home</mat-icon></a>\n    <mat-icon>keyboard_arrow_right</mat-icon>\n    <a mat-button [routerLink]=\"'/'+moduleName+'/'+appName\" class=\"mat-caption\">{{ appName }}</a>\n    <mat-icon>keyboard_arrow_right</mat-icon>\n    <a mat-button class=\"mat-caption\">{{ model.verbose_name }}s</a>\n    <span class=\"toolbar-fill-remaining-space\"></span>\n    <a mat-button [routerLink]=\"'/'+moduleName+'/'+appName+'/'+modelName+'/new'\" color=\"primary\">Create</a>\n    &nbsp;\n    <button mat-button color=\"warn\" [matMenuTriggerFor]=\"menu\">Bulk Actions <mat-icon>arrow_drop_down</mat-icon></button>    \n    <mat-menu #menu=\"matMenu\" >\n        <button mat-menu-item>Delete</button>\n    </mat-menu>\n</mat-toolbar> -->\n\n<div class=\"row\" *ngIf=\"mode !== 'pick'\">\n    <span class=\"fill-remaining-space\"></span>\n    <button mat-button color=\"warn\" [matMenuTriggerFor]=\"menu\">Bulk Actions <mat-icon>arrow_drop_down</mat-icon></button>    \n    <mat-menu #menu=\"matMenu\" >\n        <button mat-menu-item>Delete</button>\n    </mat-menu>\n</div>\n\n<mat-expansion-panel>\n    <mat-expansion-panel-header>\n        <mat-panel-title>\n            <mat-icon>search</mat-icon>\n        </mat-panel-title>\n        <mat-panel-description>\n            Search and filter restults\n        </mat-panel-description>                \n    </mat-expansion-panel-header>\n\n    <ng-crud-model-form [moduleName]=\"moduleName\" [appName]=\"appName\" mode='search'\n                 [modelName]=\"modelName\" (submit)=\"onSearch($event)\"></ng-crud-model-form>\n\n</mat-expansion-panel>    \n\n<mat-progress-bar *ngIf=\"isLoading\" mode=\"query\"></mat-progress-bar>\n\n<mat-table [dataSource]=\"dataSource\">\n    <ng-container *ngFor=\"let column of columns\" [matColumnDef]=\"column.columnDef\">\n        <ng-template [ngIf]=\"column.columnDef === 'checked'\">\n            <mat-header-cell *matHeaderCellDef (click)=\"onCheckAll()\"><mat-checkbox></mat-checkbox></mat-header-cell>\n            <mat-cell *matCellDef=\"let row\"> <mat-checkbox></mat-checkbox> </mat-cell>\n        </ng-template>\n        <ng-template [ngIf]=\"column.columnDef !== 'checked' && column.columnDef !== 'actions'\">\n            <mat-header-cell *matHeaderCellDef>{{ column.header }}</mat-header-cell>\n            <mat-cell *matCellDef=\"let row\">\n                <!-- <a *ngIf=\"column.clickable; else normal\" [routerLink]=\"getLink(row.id)\">{{ column.cell(row) }}</a>\n                <ng-template #normal>{{ column.cell(row) }}</ng-template>     -->\n                <a class=\"clickable\" [routerLink]=\"[row.id]\" *ngIf=\"(mode !== 'pick' && column.columnDef === model.external_name_field); else normalCell\">\n                    {{ column.cell(row) }}\n                </a>\n                <ng-template #normalCell>\n                    {{ column.cell(row) }}\n                </ng-template>\n            </mat-cell>\n        </ng-template>\n        <ng-template [ngIf]=\"column.columnDef === 'actions'\">\n            <mat-header-cell *matHeaderCellDef>{{ column.header }}</mat-header-cell>\n            <mat-cell *matCellDef=\"let row\">\n                <button mat-button *ngFor=\"let action of model.list_actions\">\n                    {{ action }}\n                </button>\n            </mat-cell>\n            </ng-template>\n    </ng-container>\n\n    <mat-header-row *matHeaderRowDef=\"displayColumns\"></mat-header-row>\n    <mat-row  *matRowDef=\"let row; columns: displayColumns;\" [ngClass]=\"{'clickable': mode === 'pick'}\" (click)=\"_picked(row[this.model.external_value_field])\"></mat-row>\n</mat-table>\n\n<mat-paginator #paginator\n    [length]=\"resultsCount\"\n    [pageIndex]=\"searchParams.page - 1\"\n    [pageSize]=\"20\">\n</mat-paginator>`,\n  styles: [`.clickable{color:#00f;cursor:pointer}`],\n  exportAs: 'ngcrudui-listing'\n})\nexport class ListingComponent implements OnChanges {\n\n    @Input('moduleName') moduleName: string;\n    @Input('appName') appName: string;\n    @Input('modelName') modelName: string;\n    @Input() mode = 'normal'; // other modes: 'pick'\n    is_actions_set = false;\n    @Input() forcedSearchParams: any;\n    dataSource = new MatTableDataSource();\n    searchParams = {\n        page: 1,\n    };\n    model: Model;\n    columns = [];\n    displayColumns: string[] = [];\n    resultsCount = 0;\n    isLoading = true;\n    @Output() picked = new EventEmitter();\n\n    constructor(private api: ApiService,\n                private reg: Registry,\n                private route: ActivatedRoute,\n                private router: Router) {}\n\n    ngOnChanges() {\n        if (this.modelName) {\n            this.populateDataTable();\n        }\n   }\n\n    private prepareColumns() {\n        if (this.mode !== 'pick') {\n            this.columns = [{'columnDef': 'checked', 'header': ''}];\n        } else {\n            this.columns = [];\n        }\n        this.model.listing_fields.map(field => {\n            const f = this.model.fields.filter(ff => ff.key === field)[0];\n            const col = {};\n            col['columnDef'] = f.key;\n            col['header'] = f.label;\n            col['cell'] = (element: Element) => `${element[f.key]}`;\n            if (this.model.external_name_field === field) {\n                col['clickable'] = true;\n            }\n            this.columns.push(col);\n        });\n        if (this.mode !== 'pick') {\n            this.columns.push({'columnDef': 'actions', 'header': ''});\n        }\n    }\n\n    private populateDataTable() {\n        this.model = this.reg.getModel(this.moduleName, this.appName, this.modelName);\n        this.prepareColumns();\n        this.displayColumns = this.columns.map(c => c.columnDef);\n        this.resultsCount = 0;\n        this.dataSource.data = [];\n        // this.displayColumns.push('actions');\n        this.searchParams = {page: 1};\n        this.fetch();\n    }\n\n    fetch() {\n        this.api.fetch(this.model.api, this.searchParams).subscribe(res => {\n            let newItems = [];\n            if (res.results) {\n                newItems = this.dataSource.data.concat(res.results);\n            } else {\n                newItems = this.dataSource.data.concat(res);\n            }\n            this.resultsCount = newItems.length;\n            this.dataSource.data = newItems;\n            this.isLoading = false;\n        }, err => {\n            this.isLoading = false;\n        });\n    }\n\n   getLink(id): string[] {\n       return ['/', this.moduleName, this.appName, this.modelName, id];\n   }\n\n   cellClicked(columnName: string, row: any) {\n       if (columnName === this.model.external_name_field) {\n           this.router.navigate(this.getLink(row.id));\n       }\n   }\n\n    onSearch(searchParams) {\n        this.isLoading = true;\n        this.dataSource.data = [];\n        this.resultsCount = 0;\n        this.searchParams = searchParams;\n        this.searchParams.page = 1;\n        this.fetch();\n    }\n\n    onChecked(row) {\n        row['is_checked'] = true;\n    }\n\n    onCheckAll() {\n\n    }\n\n    _picked(value) {\n        this.picked.next(value);\n    }\n\n}\n","import { Component, OnChanges, Input, Output, EventEmitter } from '@angular/core';\nimport { AbstractControl, FormGroup, FormBuilder, FormControl, FormArray } from '@angular/forms';\nimport { DataSource } from '@angular/cdk/collections';\nimport { Observable ,  BehaviorSubject } from 'rxjs';\n\nimport { ApiService } from '../../services/api.service';\nimport { Registry } from '../../services/registry.service';\nimport { Model } from '../../screens';\nimport { FormService } from '../../services/form.service';\nimport { FieldType, Field, AutoCompleteField } from '../../forms';\n\n@Component({\n  selector: 'ng-crud-model-form',\n  template: `<!-- <mat-progress-bar *ngIf=\"isLoading\" mode=\"query\"></mat-progress-bar> -->\n\n<ng-template [ngIf]=\"is_ready\">\n    <!-- <div class=\"form-container\"> -->\n    <div class=\"row\">\n        <ng-container *ngFor=\"let field of fields\">\n            <ng-crud-form-field  [form]=\"form\" [field]=\"field\"></ng-crud-form-field>\n        </ng-container>\n    </div>\n\n\n    <div *ngFor=\"let formarray of formsets; let i=index\">\n        <mat-divider></mat-divider>\n        <ng-crud-formset  [model]=\"model\" [config]=\"model.formsets[i]\"  [formarray]=\"formarray\" [form]=\"form\"></ng-crud-formset>        \n    </div>\n\n    <div class=\"row\">\n        <button mat-raised-button color=\"primary\" class=\"submit-button\" (click)=\"_onSubmit()\">\n            <span *ngIf=\"mode === 'search'\">Search</span>\n            <span *ngIf=\"mode === 'create'\">Create</span>\n            <span *ngIf=\"mode === 'edit'\">Update</span>\n        </button>\n    </div>\n</ng-template>`,\n  styles: [`.row{display:flex;flex:1 1 auto;flex-flow:row wrap}.submit-button{align-self:flex-end}`],\n  exportAs: 'ngcrudui-model-form'\n})\nexport class ModelFormComponent implements OnChanges {\n\n    @Input() moduleName: string;\n    @Input() appName: string;\n    @Input() modelName: string;\n    @Input() mode = 'search';\n    @Input() id: number = null;\n    ngModel: any = {};\n    model: Model;\n    fieldType: typeof FieldType = FieldType;\n    AutoCompleteField: typeof AutoCompleteField = AutoCompleteField;\n    fields: Field[] = [];\n    choices = {};\n    @Output() submit = new EventEmitter<any>();\n    form: FormGroup = new FormGroup({});\n    formset: FormArray = new FormArray([]);\n    formsets: FormArray[] = new Array<FormArray>();\n    is_ready = false;\n\n    constructor(\n        private api: ApiService,\n        private reg: Registry,\n        private formService: FormService,\n    ) {\n\n    }\n\n    ngOnChanges() {\n        if (!this.appName || !this.modelName || !this.moduleName) {\n            return;\n        }\n        this.form = this.reg.forms[this.modelName];\n        console.log(this.form);\n        // this.model = this.reg.getModel(this.moduleName, this.appName, this.modelName);\n        // if (this.mode === 'search') {\n        //     this.fields = this.model.fields.filter((f: Field) => !(f.is_searchable === false));\n        //     this.buildForm(null);\n        // } else if (this.mode === 'edit') {\n        //     // edit mode\n        //     const api = `${this.model.api}${this.id}/`;\n        //     // remove the uneditable fields\n        //     this.fields = this.model.fields.filter(f => {\n        //         return !(f.is_editable === false);\n        //     });\n        //     this.api.fetch(api, {}).subscribe(res => {\n        //         this.buildForm(res);\n        //     });\n        // } else {\n        //     this.buildForm(null);\n        // }\n\n        // // if (this.model.form_type === 'formset') {\n        // //     this.formset = this.formService.toFormArray(this.fields, []);\n        // // } else {\n        // //     this.form = this.formService.toFormGroup(this.fields);\n        // // }\n    }\n\n    _onSubmit() {\n        this.submit.emit(this.form.value);\n    }\n\n    buildForm(values: any) {\n        if (values !== null) {\n            this.fields.map(f => {\n                f._value = values[f.key];\n                return f;\n            });\n        }\n        this.form = this.formService.toFormGroup(this.fields);\n        // Check if the model has formsets, render them beneath the main form\n        if (this.mode !== 'search' && this.model.formsets) {\n            for (const formset of this.model.formsets) {\n                const fs = this.formService.toFormArray(formset.fields, values[formset.key]);\n                this.formsets.push(fs);\n                this.form.addControl(formset.key, fs);\n            }\n        }\n        this.is_ready = true;\n    }\n\n}\n","import { Component, OnInit, Inject } from '@angular/core';\nimport { ActivatedRoute , Router} from '@angular/router';\nimport { MAT_DIALOG_DATA, MatDialogRef } from '@angular/material/dialog';\n\nimport { Registry } from '../../services/registry.service';\n\n@Component({\n  template: `<section class=\"app-settings\" *ngIf=\"modelName\">\n\n  <ng-crud-listing (picked)=\"picked($event)\" [modelName]=\"modelName\" [appName]=\"appName\" [moduleName]=\"moduleName\" mode=\"pick\">\n\n  </ng-crud-listing>\n</section>`,\n  styles: [`#custom-header{padding-top:12px;margin-bottom:12px}.page-title a{color:#333}.mat-tab-nav-bar,mat-tab-nav-bar{border:none!important}.tabs-bar a{color:#fff}`]\n})\nexport class ListingDialogComponent implements OnInit {\n\n    moduleName: string;\n    appName: string;\n    modelName: string;\n\n    constructor(\n      private reg: Registry,\n      private ref: MatDialogRef<ListingDialogComponent>,\n      @Inject(MAT_DIALOG_DATA) public data: any,\n    ) {}\n\n    ngOnInit() {\n      this.moduleName = this.data['moduleName'];\n      this.appName = this.data['appName'];\n      this.modelName = this.data['modelName'];\n    }\n\n    picked(value) {\n      console.log('picked', value);\n      this.ref.close(value);\n    }\n\n}\n","import { Component, OnChanges, Input, SimpleChanges } from '@angular/core';\nimport { FormControl, AbstractControl } from '@angular/forms';\nimport { Observable, of } from 'rxjs';\nimport { map, startWith, debounceTime, distinctUntilChanged, switchMap } from 'rxjs/operators';\nimport { MatDialog } from '@angular/material/dialog';\n\nimport {  Model } from '../../screens';\nimport { Registry } from '../../services/registry.service';\nimport { ApiService } from '../../services/api.service';\nimport { Field } from '../../forms';\nimport { ListingDialogComponent } from '../../containers/listing-dialog/listing-dialog.component';\n\nlet CHOICES = [];\nlet FOREIGN_MODEL;\n\n@Component({\n  selector: 'ng-crud-form-field',\n  template: `<div [ngSwitch]=\"field.control_type\" class=\"form-field-wrapper\" [formGroup]=\"form\">\n\n    <div *ngSwitchCase=\"'switch'\">\n        <mat-slide-toggle matInput [formControlName]=\"field.key\">{{ field.label }}</mat-slide-toggle>\n    </div>\n\n    <mat-form-field *ngSwitchCase=\"'textarea'\">\n        <mat-label>{{ field.label }}</mat-label>\n        <textarea matInput matTextareaAutosize [formControlName]=\"field.key\"\n            [rows]=\"field.rowspan || 1\"></textarea>\n    </mat-form-field>\n\n    <mat-form-field *ngSwitchCase=\"'select'\">\n        <mat-label>{{ field.label }}</mat-label>\n        <mat-select [formControlName]=\"field.key\">\n            <mat-option></mat-option>\n            <mat-option [value]=\"c.value\" *ngFor=\"let c of field.choices\">\n                {{ c.label }}\n            </mat-option>\n        </mat-select>\n    </mat-form-field>\n\n    <mat-form-field *ngSwitchCase=\"'date'\">\n        <mat-label>{{ field.label }}</mat-label>\n        <input  matInput [formControlName]=\"field.key\"  [matDatepicker]=\"myDatepicker\" />\n        <mat-datepicker-toggle matSuffix [for]=\"myDatepicker\"></mat-datepicker-toggle>\n        <mat-datepicker #myDatepicker></mat-datepicker>\n    </mat-form-field>\n    \n    <ng-container *ngSwitchCase=\"'foreign_key'\">\n        <mat-form-field>\n            <mat-label>{{ field.label }}</mat-label>\n            <input type=\"text\" matInput [formControlName]=\"field.key\" [matAutocomplete]=\"auto\">\n        </mat-form-field>\n        <!-- <button mat-icon-button (click)=\"openListingDialog()\"><mat-icon>search</mat-icon></button> -->\n        \n        <mat-autocomplete #auto=\"matAutocomplete\" [displayWith]=\"displayFn\">\n            <mat-option *ngFor=\"let option of filteredOptions | async\" [value]=\"option[foreign_model.external_value_field]\">\n                {{ option[foreign_model.external_name_field] }}\n            </mat-option>\n        </mat-autocomplete>\n    </ng-container>\n\n    <!-- this fallsback from number and text -->\n    <mat-form-field *ngSwitchDefault>\n        <mat-label>{{ field.label }}</mat-label>\n        <input  matInput [formControlName]=\"field.key\"\n                [type]=\"field.control_type || field.value_type || 'text'\" />\n    </mat-form-field>\n\n</div>`,\n  exportAs: 'ngcrudui-form-field',\n  styles: ['.form-field-wrapper{margin-right:  24px}']\n})\nexport class FormFieldComponent implements OnChanges {\n\n  @Input() form: AbstractControl;\n  @Input() forcedSearchParams: any = [];\n  @Input() field: Field;\n  @Input() choices;\n  filteredOptions: Observable<any[]>;\n  foreign_model?: Model;\n  private modelPath: string[] = [];\n\n  constructor(private dialog: MatDialog, private api: ApiService, private reg: Registry) {\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    if (this.field.control_type === 'foreign_key') {\n      console.log('first change', this.choices);\n      const path = this.field.foreign_model_path.split('.');\n      this.modelPath = path;\n      this.foreign_model = this.reg.getModel(path[0], path[1], path[2]);\n      FOREIGN_MODEL = this.foreign_model;\n      if (this.choices) {\n        console.log('found choices');\n        this.filteredOptions = of(this.choices);\n      }\n      // this.api.fetch(`${this.foreign_model.api}`, []).subscribe(res => {\n      //   this.choices = res;\n      //   CHOICES = res;\n      // });\n      const ctrl = this.form.get(this.field.key);\n      this.filteredOptions = ctrl.valueChanges.pipe(\n        startWith(''),\n        debounceTime(200),\n        distinctUntilChanged(),\n        switchMap(val => this._filter(val || null))\n      );\n      // if (this.form.value[this.field.key]) {\n      //   console.log('setting ctrl value', this.form.value[this.field.key]);\n      //   ctrl.setValue(this.form.value[this.field.key]);\n      // }\n    }\n  }\n\n  getFormControl(field_name: string): FormControl {\n    return this.form.get(field_name) as FormControl;\n  }\n\n  displayFn(option) {\n    for (const c of CHOICES) {\n      if (c['id'] === option) {\n        return c[FOREIGN_MODEL['external_name_field']];\n      }\n    }\n    // return option ? option.code : option;\n  }\n\n  _filter(value: string): Observable<any[]> {\n    if (typeof value !== 'string') {\n      return new Observable();\n    }\n    const filterValue = value ? value.toLowerCase() : null;\n    const params = {};\n    params[this.foreign_model.external_name_field] = filterValue;\n    return this.api.fetch(`${this.foreign_model.api}`, params).pipe(\n      map(res => {\n          CHOICES = res;\n          return res;\n      })\n    );\n    // return this.choices.filter(option => option.code.toLowerCase().indexOf(filterValue) === 0);\n  }\n\n  openListingDialog() {\n    const ref = this.dialog.open(ListingDialogComponent, {\n      width: '90%',\n      height: '90%',\n      data: {\n        moduleName: this.modelPath[0],\n        appName: this.modelPath[1],\n        modelName: this.modelPath[2]\n      }\n    });\n    ref.afterClosed().subscribe(value => {\n      this.form.get(this.field.key).setValue(value);\n    });\n  }\n}\n","import { Component, OnChanges, Input, SimpleChanges } from '@angular/core';\nimport { FormGroup, FormArray } from '@angular/forms';\n\nimport {  Model } from '../../screens';\nimport { Registry } from '../../services/registry.service';\nimport { ApiService } from '../../services/api.service';\nimport { FormService } from '../../services/form.service';\nimport { Field } from '../../forms';\n\n@Component({\n  selector: 'ng-crud-formset',\n  template: `<div [formGroup]=\"form\" *ngIf=\"formarray\" class=\"formset\">\n    <div class=\"row\">\n        <h4> {{ config.label }}</h4>\n        <span class=\"spacer\"></span>\n        <button mat-icon-button (click)=\"addForm()\">\n            <mat-icon>add_circle</mat-icon>\n        </button>\n    </div>\n    <div [formArrayName]=\"config.key\">\n        <mat-grid-list gutterSize=\"12\" [cols]=\"config.fields.length\" rowHeight=\"60\"  *ngFor=\"let ctrl of formarray.controls; let i=index\" [formGroupName]=\"i\">\n            <mat-grid-tile  *ngFor=\"let f of config.fields\">\n                {{ f. key }}\n                <ng-crud-form-field [choices]=\"choices[f.key]\" [form]=\"ctrl\" [field]=\"f\"></ng-crud-form-field>\n            </mat-grid-tile>\n        </mat-grid-list>\n    </div>\n</div>`,\n  styles: [`.formset{padding-top:12px}.row{display:flex;flex:1 1 auto}.spacer{flex:1 1 auto}`],\n  exportAs: 'ngcrudui-formset'\n})\nexport class FormsetComponent implements OnChanges {\n\n  @Input() form: FormGroup;\n  @Input() model: Model;\n  @Input() formarray: FormArray;\n  @Input() config: Field;\n  choices = {};\n\n  constructor(private api: ApiService, private reg: Registry, private formService: FormService) {\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    if (changes.config.firstChange) {\n      for (const field of changes.config.currentValue.fields) {\n        if (field['control_type'] === 'foreign_key') {\n          this.getChoices(field);\n        }\n      }\n    }\n  }\n\n  addForm() {\n    const ctrl = this.formService.toFormGroup(this.config.fields);\n    this.formarray.push(ctrl);\n  }\n\n  getChoices(field: Field) {\n    const path = field.foreign_model_path.split('.');\n    const model = this.reg.getModel(path[0], path[1], path[2]);\n    this.api.fetch(model.api, {}).subscribe(res => {\n      this.choices[field.key] = res;\n      console.log(this.choices);\n    });\n  }\n}\n","import { Component, OnChanges, Input } from '@angular/core';\nimport { FormGroup, FormControl } from '@angular/forms';\nimport { Observable, of as observableOf } from 'rxjs';\nimport { startWith, map} from 'rxjs/operators';\n\nimport {  Model } from '../../screens';\nimport { Registry } from '../../services/registry.service';\nimport { ApiService } from '../../services/api.service';\nimport { Field } from '../../forms';\n\n@Component({\n  selector: 'ng-crud-autocomplete',\n  template: `<mat-form-field [formGroup]=\"form\">\n  <input type=\"text\" matInput [placeholder]=\"field.label\" [formControl]=\"ctrl\" [matAutocomplete]=\"auto\">\n  <mat-autocomplete #auto=\"matAutocomplete\" [displayWith]=\"displayWith(foreign_model)\">\n      <mat-option *ngFor=\"let c of filteredOptions | async\" [value]=\"c[foreign_model.external_value_field]\">\n        {{ c[foreign_model.external_name_field] }}\n      </mat-option>\n    </mat-autocomplete>\n</mat-form-field>`,\n  exportAs: 'ngcrudui-autocomplete'\n})\nexport class AutoCompleteFieldComponent implements OnChanges {\n\n  @Input() model: Model;\n  @Input() field: Field;\n  @Input() foreign_model: Model;\n  @Input() form: FormGroup;\n  @Input() choices: any[] = [];\n  @Input() forcedSearchParams: any;\n  dataSource: any[] = new Array();\n  searchParams: {};\n  filteredOptions: Observable<any[]>;\n  ctrl: FormControl;\n\n  constructor(private api: ApiService, private reg: Registry) {\n  }\n\n   ngOnChanges() {\n     if (!this.foreign_model) {\n       return;\n     }\n      this.searchParams = {page: 1};\n      this.ctrl = this.form.get(this.field.key) as FormControl;\n      console.log('foreign key value', this.ctrl.value);\n      this.filteredOptions = observableOf(this.choices);\n      this.filteredOptions = this.ctrl.valueChanges.pipe(\n        startWith(''),\n        map((val: string) => this.filter(val))\n      );\n      // this.api.fetch(this.model.api, this.searchParams).subscribe(res => {\n      //   this.dataSource.push(res['results']);\n      // });\n   }\n\n   filter(text: string): any[] {\n    return this.choices.filter(option => {\n      console.log(text);\n      const val = option[this.foreign_model.external_name_field];\n      return val ? val.toLowerCase().indexOf(text.toLowerCase()) === 0 : false;\n    });\n   }\n\n   valueFormatter(data: any): string {\n      return `(${data[this.model.external_value_field]}) ${data[this.model.external_name_field]}`;\n    }\n\n  displayWith(foreign_model) {\n    return (item: any): string => {\n      return item[foreign_model.external_name_field];\n    };\n  }\n}\n","import { Component, OnChanges, Input } from '@angular/core';\nimport { FormGroup, FormControl } from '@angular/forms';\nimport { Observable } from 'rxjs';\nimport { map, startWith } from 'rxjs/operators';\n\nimport {  Model } from '../../screens';\nimport { Registry } from '../../services/registry.service';\nimport { ApiService } from '../../services/api.service';\nimport { Field } from '../../forms';\n\n@Component({\n  selector: 'ng-crud-foreign-key-field',\n  template: `<mat-form-field>\n    <input type=\"text\" matInput [formControlName]=\"field.key\" [matAutocomplete]=\"auto\">\n</mat-form-field>\n\n<mat-autocomplete #auto=\"matAutocomplete\" [displayWith]=\"displayFn\">\n    <mat-option *ngFor=\"let option of choices\" [value]=\"option[model.external_value_field]\">\n        {{ option[model.external_name_field] }}\n    </mat-option>\n</mat-autocomplete>`\n})\nexport class ForeignKeyFieldComponent implements OnChanges {\n\n  @Input() formGroup: FormGroup;\n  @Input() forcedSearchParams: any = [];\n  @Input() field: Field;\n  choices = [];\n  filteredOptions:  Observable<any[]>;\n  model?: Model;\n\n  constructor(private api: ApiService, private reg: Registry) {\n  }\n\n//   ngOnInit() {\n//   }\n\n  ngOnChanges() {\n    if (!this.formGroup) {\n        return;\n    }\n    console.log(this.formGroup, this.field.key, this.formGroup.get(this.field.key));\n    this.filteredOptions = (this.formGroup.get(this.field.key) as FormControl).valueChanges.pipe(\n        startWith(''),\n        map(value => {\n            console.log(value);\n            return value ? value['code'] : value;\n        }),\n        map(code => code ? this._filter(name) : this.choices.slice())\n    );\n      console.log(this.formGroup);\n      const path = this.field.foreign_model_path.split('.');\n      this.model = this.reg.getModel(path[0], path[1], path[2]);\n      this.api.fetch(`${this.model.api}`, []).subscribe(res => {\n        this.choices = res;\n      });\n  }\n\n  displayFn(option) {\n    return option ? option.code : option;\n  }\n\n  _filter(value: string) {\n    const filterValue = value.toLowerCase();\n    console.log(filterValue);\n\n    return this.choices.filter(option => option.code.toLowerCase().indexOf(filterValue) === 0);\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { HttpClientModule } from '@angular/common/http';\nimport { RouterModule } from '@angular/router';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport { MomentModule } from 'ngx-moment';\n\nimport {\n  MatToolbarModule,\n  MatSidenavModule,\n  MatListModule,\n  MatIconModule,\n  MatTableModule,\n  MatCardModule,\n  MatPaginatorModule,\n  MatButtonModule,\n  MatMenuModule,\n  MatProgressBarModule,\n  MatFormFieldModule,\n  MatInputModule,\n  MatCheckboxModule,\n  MatSlideToggleModule,\n  MatGridListModule,\n  MatSnackBarModule,\n  MatDatepickerModule,\n  MatNativeDateModule,\n  MatSelectModule,\n  MatTabsModule,\n  MatExpansionModule,\n  MatAutocompleteModule,\n} from '@angular/material';\n\n\nimport { ListingComponent } from './components/listing/listing.component';\nimport { ModelFormComponent } from './components/model-form/model-form.component';\nimport { ModelFormScreenComponent } from './components/model-form-screen/model-form-screen.component';\nimport { FormFieldComponent } from './components/form-field/form-field.component';\nimport { FormsetComponent } from './components/formset/formset.component';\nimport { AutoCompleteFieldComponent } from './components/auto-complete-field/auto-complete-field.component';\nimport { ForeignKeyFieldComponent } from './components/foreign-key-field/foreign-key-field.component';\n\nimport { AppScreenComponent } from './containers/app-screen/app-screen.component';\nimport { ListingScreenComponent } from './containers/listing-screen/listing-screen.component';\nimport { ListingDialogComponent } from './containers/listing-dialog/listing-dialog.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    FormsModule,\n    ReactiveFormsModule,\n    HttpClientModule,\n    MomentModule,\n    RouterModule,\n    //\n    MatToolbarModule,\n    MatSidenavModule,\n    MatListModule,\n    MatIconModule,\n    MatTableModule,\n    MatCardModule,\n    MatPaginatorModule,\n    MatButtonModule,\n    MatMenuModule,\n    MatProgressBarModule,\n    MatFormFieldModule,\n    MatInputModule,\n    MatCheckboxModule,\n    MatSlideToggleModule,\n    MatGridListModule,\n    MatSnackBarModule,\n    MatDatepickerModule,\n    MatNativeDateModule,\n    MatSelectModule,\n    MatTabsModule,\n    MatExpansionModule,\n    MatAutocompleteModule,\n  ],\n  declarations: [\n    FormFieldComponent,\n    AutoCompleteFieldComponent,\n    ListingComponent,\n    ModelFormComponent,\n    AppScreenComponent,\n    ListingScreenComponent,\n    ModelFormScreenComponent,\n    FormsetComponent,\n    ForeignKeyFieldComponent,\n    ListingDialogComponent,\n  ],\n  providers: [\n  ],\n  exports: [\n    HttpClientModule,\n    AutoCompleteFieldComponent,\n    MatToolbarModule,\n    MatSidenavModule,\n    MatListModule,\n    MatIconModule,\n    MatTableModule,\n    MatCardModule,\n    MatPaginatorModule,\n    MatButtonModule,\n    MatMenuModule,\n    MatProgressBarModule,\n    MatFormFieldModule,\n    MatInputModule,\n    MatCheckboxModule,\n    MatSlideToggleModule,\n    MatGridListModule,\n    MatSnackBarModule,\n    MatNativeDateModule,\n    MatDatepickerModule,\n    MatSelectModule,\n    MatTabsModule,\n    MatAutocompleteModule,\n    MatExpansionModule,\n    FormFieldComponent,\n    ListingComponent,\n    ModelFormComponent,\n    AppScreenComponent,\n    ListingScreenComponent,\n    ModelFormScreenComponent,\n    FormsetComponent,\n    ForeignKeyFieldComponent,\n  ],\n  entryComponents: [\n    ListingDialogComponent\n  ]\n})\nexport class CrudModule { }\n"],"names":["BehaviorSubject","tslib_1.__values","FormControl","FormGroup","Injectable","router","Component","Router","ActivatedRoute","EventEmitter","HttpParams","HttpClient","tslib_1.__extends","MatSnackBar","FormArray","MatTableDataSource","Input","Output","MatDialogRef","Inject","MAT_DIALOG_DATA","dialog","of","startWith","debounceTime","distinctUntilChanged","switchMap","Observable","map","MatDialog","observableOf","NgModule","CommonModule","FormsModule","ReactiveFormsModule","HttpClientModule","MomentModule","RouterModule","MatToolbarModule","MatSidenavModule","MatListModule","MatIconModule","MatTableModule","MatCardModule","MatPaginatorModule","MatButtonModule","MatMenuModule","MatProgressBarModule","MatFormFieldModule","MatInputModule","MatCheckboxModule","MatSlideToggleModule","MatGridListModule","MatSnackBarModule","MatDatepickerModule","MatNativeDateModule","MatSelectModule","MatTabsModule","MatExpansionModule","MatAutocompleteModule"],"mappings":"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"}
