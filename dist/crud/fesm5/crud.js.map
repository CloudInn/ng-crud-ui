{"version":3,"file":"crud.js.map","sources":["ng://crud/lib/services/registry.service.ts","ng://crud/lib/containers/listing-screen/listing-screen.component.ts","ng://crud/lib/services/navigator.service.ts","ng://crud/lib/containers/app-screen/app-screen.component.ts","ng://crud/lib/services/api.service.ts","ng://crud/lib/forms.ts","ng://crud/lib/components/model-form-screen/model-form-screen.component.ts","ng://crud/lib/screens.ts","ng://crud/lib/services/form.service.ts","ng://crud/lib/components/listing/listing.component.ts","ng://crud/lib/components/model-form/model-form.component.ts","ng://crud/lib/containers/listing-dialog/listing-dialog.component.ts","ng://crud/lib/components/form-field/form-field.component.ts","ng://crud/lib/components/formset/formset.component.ts","ng://crud/lib/components/auto-complete-field/auto-complete-field.component.ts","ng://crud/lib/components/foreign-key-field/foreign-key-field.component.ts","ng://crud/lib/crud.module.ts"],"sourcesContent":["import { Injectable, EventEmitter } from '@angular/core';\nimport { FormGroup, FormControl, Validators } from '@angular/forms';\nimport { Observable ,  Subject ,  BehaviorSubject } from 'rxjs';\nimport { Field, CrudForm } from '../forms';\nimport { App, Model } from '../screens';\n\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class Registry {\n\n  public forms: {[key: string]: FormGroup} = {};\n  private registry: any = {};\n  public isReady: BehaviorSubject<boolean> = new BehaviorSubject<boolean>(false);\n\n  constructor() {}\n\n  registerForm(metadata: CrudForm, formClass: any) {\n    const ctrls = {};\n    for (const ctrl of metadata.controls) {\n      ctrls[ctrl.name] = new FormControl({}, ctrl.validators);\n    }\n    const f = new FormGroup(ctrls);\n    this.forms[metadata.name] = f;\n  }\n\n  register(meta: {}) {\n    this.registry = meta;\n    this.isReady.next(true);\n  }\n\n  getModules() {\n    return this.registry;\n  }\n\n  getModel(moduleName: string, app: string, key: string): Model {\n    return this.registry[moduleName].apps.filter((a: App) => a.key === app)[0]\n      .models.filter(m => m.key === key)[0];\n  }\n\n  getApp(moduleName: string, app: string): App {\n    return this.registry[moduleName].apps.filter(a => a.key === app)[0];\n  }\n\n  getAppModels(moduleName: string, app: string): {string: Model} {\n    return this.registry[moduleName].apps.filter(a => a.key === app).models;\n  }\n\n}\n","import { Component, OnInit, Input } from '@angular/core';\nimport { ActivatedRoute , Router} from '@angular/router';\n\nimport { Registry } from '../../services/registry.service';\n\n@Component({\n  template: `<section class=\"app-settings\" *ngIf=\"modelName\">\n\n  <ng-crud-listing [modelName]=\"modelName\" [appName]=\"appName\" [moduleName]=\"moduleName\">\n\n  </ng-crud-listing>\n</section>\n`,\n  styles: [`#custom-header{padding-top:12px;margin-bottom:12px}.page-title a{color:#333}.mat-tab-nav-bar,mat-tab-nav-bar{border:none!important}.tabs-bar a{color:#fff}`]\n})\nexport class ListingScreenComponent implements OnInit {\n\n    appName: string = null;\n    moduleName: string = null;\n    modelName: string = null;\n\n    constructor(\n      private reg: Registry,\n      private router: Router,\n      private route: ActivatedRoute,\n    ) {}\n\n    ngOnInit() {\n      // keep listening for route params changes, in case of\n      // the model name changed, e.g: another model clicked from\n      // the nav menu\n      this.route.params.subscribe(params => {\n        const parentParams = this.route.parent.snapshot.params;\n        this.moduleName = parentParams['module'];\n        this.appName = parentParams['app'];\n        this.modelName = params['model_name'];\n      });\n    }\n\n}\n","import { Injectable, EventEmitter } from '@angular/core';\nimport { AbstractControl, FormGroup, FormControl, FormArray } from '@angular/forms';\nimport { Observable ,  Subject } from 'rxjs';\nimport { Field } from '../forms';\n\n@Injectable({\n    providedIn: 'root'\n})\nexport class Navigator {\n\n    navItems: EventEmitter<any[]> = new EventEmitter();\n    activeNavItem = null;\n    path: EventEmitter<string[]> = new EventEmitter<string[]>();\n\n    constructor() { }\n\n}\n","import { Component, OnInit, Input } from '@angular/core';\nimport { ActivatedRoute, Router } from '@angular/router';\n\nimport { Registry } from '../../services/registry.service';\nimport { Navigator } from '../../services/navigator.service';\n\n@Component({\n  template: `<section class=\"app-settings\">\n  \n  <!-- <mat-card>\n    <p class=\"mat-subheading-1\">Welcome to Cloudinn Settings</p>\n  </mat-card> -->\n  <div class=\"container\">\n    <router-outlet></router-outlet>\n  </div>\n</section>\n`,\n  styles: [`#custom-header{padding-top:12px;margin-bottom:12px}.page-title a{color:#333}.mat-tab-nav-bar,mat-tab-nav-bar{border:none!important}.tabs-bar a{color:#fff}`]\n})\nexport class AppScreenComponent implements OnInit {\n\n  app: any = null;\n  moduleName = null;\n  models = [];\n\n  constructor(\n    private reg: Registry,\n    private router: Router,\n    private route: ActivatedRoute,\n    private navigator: Navigator,\n  ) {\n  }\n\n  ngOnInit() {\n    const params = this.route.snapshot.params;\n    this.moduleName = params['module'];\n    this.app = this.reg.getApp(this.moduleName, params['app']);\n    this.models = this.app.models;\n\n    this.renderSidebar();\n    if (!this.route.firstChild) {\n      // this.renderSidebar();\n      this.navigator.path.emit([params['module'], params['app'], this.models[0].key]);\n      this.router.navigate([`/${params['module']}`, params['app'], this.models[0].key]);\n      return;\n    }\n    this.navigator.path.emit([params['module'], params['app'], this.route.firstChild.snapshot.params['model_name']]);\n\n    // this.route.params.subscribe(res => {\n    //   console.log(res);\n    // });\n    // console.log(this.route.firstChild.snapshot.params);\n\n    // if (!params['model_name']) {\n    //   this.renderSidebar();\n    //   // this.router.navigate([`/${params['module']}`, params['app'], this.models[0].key]);\n    //   return;\n    // }\n  }\n\n  // ngOnChanges() {\n  //   this.route.params.subscribe(params => {\n  //     this.moduleName = params['parent_app'];\n  //     this.app = this.reg.getApp(params['app']);\n  //     this.models = this.reg.getAppModels(params['app']);\n  //   });\n  // }\n  renderSidebar() {\n    const items = [];\n    const item = { title: this.app.label, type: 'subheading' };\n    items.push(item);\n    this.models.forEach(m => {\n      const i = {title: `${m.verbose_name}s`, url: `/${this.moduleName}/${this.app.key}/${m.key}` };\n      items.push(i);\n    });\n    this.navigator.navItems.next(items);\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { HttpClient, HttpParams } from '@angular/common/http';\nimport { Observable } from 'rxjs';\n\n@Injectable({\n    providedIn: 'root'\n})\nexport class ApiService {\n\n    constructor(private http: HttpClient) { }\n\n    public fetch(api: string, params?: any): Observable<any> {\n        let opts = new HttpParams();\n        Object.keys(params).forEach(p => {\n            if (params[p]) {\n                opts = opts.set(p, params[p]);\n            }\n        });\n\n        return this.http.get(api, {params: opts});\n    }\n\n    public put(api: string, body, params = {}): Observable<any> {\n        let opts = new HttpParams();\n        Object.keys(params).forEach(p => {\n            if (params[p]) {\n                opts = opts.set(p, params[p]);\n            }\n        });\n\n        return this.http.put(api, body, {params: opts});\n    }\n\n    public post(api: string, body, params = {}): Observable<any> {\n        let opts = new HttpParams();\n        Object.keys(params).forEach(p => {\n            if (params[p]) {\n                opts = opts.set(p, params[p]);\n            }\n        });\n\n        return this.http.post(api, body, {params: opts});\n    }\n\n}\n","import { FormControl } from '@angular/forms';\n\nexport interface BaseField {\n  label: string;\n}\n\nexport interface CrudField {\n  name: string;\n  label: string;\n  validators?: any[];\n}\n\nexport interface CrudForm {\n  name: string;\n  controls: CrudField[];\n}\n\nexport enum FieldType {\n  Text,\n  Number,\n  Date,\n  DateTime,\n  Time,\n  Boolean,\n  ForeignKey,\n  ManyToMany,\n  // FormSet,\n  File,\n}\n\nexport class Field implements BaseField {\n  key: string;\n  label: string;\n  value_type: string;\n  control_type: string;\n  is_editable = true;\n  is_searchable = true;\n  is_hidden = false;\n  // foreign key information\n  // foreign_model?: any = null; // evaluated in run time\n  foreign_model_path?: string;\n  // choices?: any[];\n  fields: Field[];\n  choices: any;\n  colspan = 1;\n  rowspan = 1;\n\n  _value: any;\n\n  constructor(\n    label: string,\n    key: string,\n    type: string,\n    is_editable?: boolean,\n    is_searchable?: boolean,\n    foreign_model?: any,\n    colors?: any\n  ) {\n    this.key = key;\n    this.label = label;\n    this.value_type = type;\n    this.is_editable = is_editable;\n    this.is_searchable = is_searchable;\n    // this.foreign_model = foreign_model;\n  }\n\n}\n\nexport class Fieldset implements BaseField {\n  label: string;\n  is_fieldset = true;\n  fields: Field[];\n}\n\nexport class Formset implements BaseField {\n  label: string;\n  model: any;\n}\n\nexport class AutoCompleteField<T> extends FormControl {\n  value: T;\n  label = 'some label';\n}\n\nexport class DefaultCrudForm implements CrudForm {\n  public name = '';\n  public controls = [];\n\n  constructor(public model: any) {\n      this.name = model.name;\n      Object.keys(model).forEach(v => {\n          console.log(v);\n          this.controls.push(new FormControl({}));\n      });\n  }\n}","import { Component, OnInit, Input, Output, EventEmitter } from '@angular/core';\nimport { ActivatedRoute, Router } from '@angular/router';\nimport { MatSnackBar } from '@angular/material/snack-bar';\nimport { DataSource } from '@angular/cdk/collections';\nimport { Observable ,  BehaviorSubject } from 'rxjs';\n\nimport { ApiService } from '../../services/api.service';\nimport { Registry } from '../../services/registry.service';\n\n\nimport { FieldType, Field } from '../../forms';\n\n@Component({\n  selector: 'ng-crud-model-form-screen',\n  template: `<!-- <mat-progress-bar *ngIf=\"isLoading\" mode=\"query\"></mat-progress-bar> -->\n\n<!--<form>-->\n<div class=\"wrapper\">\n    <mat-toolbar>\n        <a routerLink=\"/\" mat-icon-button class=\"mat-caption\"><mat-icon>home</mat-icon></a>\n        <mat-icon>keyboard_arrow_right</mat-icon>\n        <a mat-button [routerLink]=\"'/'+module+'/'+appName\" class=\"mat-caption\">{{ appName }}</a>\n        <mat-icon>keyboard_arrow_right</mat-icon>\n        <a mat-button class=\"mat-caption\" [routerLink]=\"'/'+module+'/'+appName+'/'+modelName\">{{ model.verbose_name }}s</a>\n        <mat-icon>keyboard_arrow_right</mat-icon>\n        <span *ngIf=\"mode === 'edit'\" class=\"mat-caption\">{{ id }}</span>\n        <span *ngIf=\"mode === 'create'\" class=\"mat-caption\">Creating new {{ modelName }}</span>\n        <span class=\"toolbar-fill-remaining-space\"></span>\n    </mat-toolbar>\n\n    <mat-card>\n        <mat-card-content>\n            <ng-crud-model-form [moduleName]=\"module\" [appName]=\"appName\" [mode]='mode'\n                [modelName]=\"modelName\" (submit)=\"onSubmit($event)\" [id]=\"id\"></ng-crud-model-form>\n        </mat-card-content>\n    </mat-card>\n</div>`,\n  styles: [`.wrapper {\n    padding: 24px;\n  }`],\n  exportAs: 'ngcrudui-model-form-screen'\n})\nexport class ModelFormScreenComponent implements OnInit {\n\n    module: string;\n    appName: string;\n    modelName: string;\n    id: any = null;\n    mode = 'create';\n    ngModel: any = {};\n    model: any;\n    fieldType: typeof FieldType = FieldType;\n    editableFields: Field[] = [];\n    choices = {};\n\n    constructor(private api: ApiService,\n                private reg: Registry,\n                private router: Router,\n                private route: ActivatedRoute,\n                private snackbar: MatSnackBar,\n    ) {}\n\n    ngOnInit() {\n        this.route.parent.params.subscribe(params => {\n            this.module = params['module'];\n            this.appName = params['app'];\n        });\n        this.route.params.subscribe(params => {\n            this.modelName = params['model_name'];\n            this.model = this.reg.getModel(this.module, this.appName, this.modelName);\n            this.id = params['id'];\n            if (this.id != null && this.id !== 'new') {\n                this.mode = 'edit';\n            }\n        });\n   }\n\n    onSubmit(e) {\n        let req: Observable<any> = null;\n        if (this.mode === 'edit') {\n            req = this.api.put(this.model.api + this.id + '/', e);\n        } else {\n            req = this.api.post(this.model.api, e);\n        }\n        req.subscribe(res => {\n            this.snackbar.open('Saved Successfully', 'Dismiss');\n            this.router.navigate([this.module, this.appName, this.modelName]);\n        }, err => {\n            this.snackbar.open('Failed to save', 'Dismiss');\n        });\n   }\n\n}\n","import { FormGroup } from '@angular/forms';\nimport { Field } from './forms';\n\n\nexport class Module {\n    label: string;\n    apps: App[] = [];\n}\n\nexport class App {\n    key: string;\n    label: string;\n    icon: string;\n    models: Model[] = [];\n}\n\nexport class Model {\n    key: string;\n    api: string;\n    verbose_name: string;\n    fields: Field[] = [];\n    formsets: Field[] = [];\n    external_value_field: string;\n    external_name_field: string;\n    listing_fields: string[];\n\n    actions: string[] = [];\n    bulk_actions: string[] = [];\n    list_actions: string[] = [];\n    pageSize: Number = 20;\n}\n\nexport class DefaultForm {\n    constructor(public model: Model) {}\n}\n\nexport class ListingScreen {\n    model: Model;\n}\n\n\nexport class EditingScreen {\n    model: Model;\n}\n","import { Injectable, EventEmitter } from '@angular/core';\nimport { AbstractControl, FormGroup, FormControl, FormArray } from '@angular/forms';\nimport { Observable ,  Subject } from 'rxjs';\nimport { Field } from '../forms';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class FormService {\n\n  constructor() {}\n\n  toFormGroup(fields: Field[]): FormGroup {\n    const controls = {};\n    for (const field of fields) {\n      if (field.control_type === 'formset') {\n        controls[field.key] = this.toFormArray(field.fields, field._value);\n      } else {\n        controls[field.key] = new FormControl(field._value);\n      }\n    }\n    return new FormGroup(controls);\n  }\n\n  toFormArray(fields: Field[], values: any[]) {\n    if (!values) {\n      values = [];\n    }\n    const groups: FormGroup[] = [];\n    values.forEach(v => {\n      // assign value to fields\n      fields.map(f => {\n        f._value = v[f.key];\n      });\n      const group = this.toFormGroup(fields);\n      groups.push(g);\n    });\n    // always add an empty row\n    const g = this.toFormGroup(fields);\n    const emptyValues = {};\n    for (const f of fields) {\n      emptyValues[f.key] = null;\n    }\n    g.setValue(emptyValues);\n    groups.push(g);\n    return new FormArray(groups);\n  }\n\n}\n","import { Component, OnChanges, Input, Output, EventEmitter } from '@angular/core';\nimport { ActivatedRoute, Router } from '@angular/router';\nimport { MatTableDataSource } from '@angular/material/table';\n\nimport { ApiService } from '../../services/api.service';\nimport { Registry } from '../../services/registry.service';\nimport {  Model } from '../../screens';\n\n@Component({\n  selector: 'ng-crud-listing',\n  template: `<!-- <mat-toolbar>\n    <a routerLink=\"/\" mat-icon-button class=\"mat-caption\"><mat-icon>home</mat-icon></a>\n    <mat-icon>keyboard_arrow_right</mat-icon>\n    <a mat-button [routerLink]=\"'/'+moduleName+'/'+appName\" class=\"mat-caption\">{{ appName }}</a>\n    <mat-icon>keyboard_arrow_right</mat-icon>\n    <a mat-button class=\"mat-caption\">{{ model.verbose_name }}s</a>\n    <span class=\"toolbar-fill-remaining-space\"></span>\n    <a mat-button [routerLink]=\"'/'+moduleName+'/'+appName+'/'+modelName+'/new'\" color=\"primary\">Create</a>\n    &nbsp;\n    <button mat-button color=\"warn\" [matMenuTriggerFor]=\"menu\">Bulk Actions <mat-icon>arrow_drop_down</mat-icon></button>    \n    <mat-menu #menu=\"matMenu\" >\n        <button mat-menu-item>Delete</button>\n    </mat-menu>\n</mat-toolbar> -->\n\n<div class=\"row\" *ngIf=\"mode !== 'pick'\">\n    <span class=\"fill-remaining-space\"></span>\n    <button mat-button color=\"warn\" [matMenuTriggerFor]=\"menu\">Bulk Actions <mat-icon>arrow_drop_down</mat-icon></button>    \n    <mat-menu #menu=\"matMenu\" >\n        <button mat-menu-item>Delete</button>\n    </mat-menu>\n</div>\n\n<mat-expansion-panel>\n    <mat-expansion-panel-header>\n        <mat-panel-title>\n            <mat-icon>search</mat-icon>\n        </mat-panel-title>\n        <mat-panel-description>\n            Search and filter restults\n        </mat-panel-description>                \n    </mat-expansion-panel-header>\n\n    <ng-crud-model-form [moduleName]=\"moduleName\" [appName]=\"appName\" mode='search'\n                 [modelName]=\"modelName\" (submit)=\"onSearch($event)\"></ng-crud-model-form>\n\n</mat-expansion-panel>    \n\n<mat-progress-bar *ngIf=\"isLoading\" mode=\"query\"></mat-progress-bar>\n\n<mat-table [dataSource]=\"dataSource\">\n    <ng-container *ngFor=\"let column of columns\" [matColumnDef]=\"column.columnDef\">\n        <ng-template [ngIf]=\"column.columnDef === 'checked'\">\n            <mat-header-cell *matHeaderCellDef (click)=\"onCheckAll()\"><mat-checkbox></mat-checkbox></mat-header-cell>\n            <mat-cell *matCellDef=\"let row\"> <mat-checkbox></mat-checkbox> </mat-cell>\n        </ng-template>\n        <ng-template [ngIf]=\"column.columnDef !== 'checked' && column.columnDef !== 'actions'\">\n            <mat-header-cell *matHeaderCellDef>{{ column.header }}</mat-header-cell>\n            <mat-cell *matCellDef=\"let row\">\n                <!-- <a *ngIf=\"column.clickable; else normal\" [routerLink]=\"getLink(row.id)\">{{ column.cell(row) }}</a>\n                <ng-template #normal>{{ column.cell(row) }}</ng-template>     -->\n                <a class=\"clickable\" [routerLink]=\"[row.id]\" *ngIf=\"(mode !== 'pick' && column.columnDef === model.external_name_field); else normalCell\">\n                    {{ column.cell(row) }}\n                </a>\n                <ng-template #normalCell>\n                    {{ column.cell(row) }}\n                </ng-template>\n            </mat-cell>\n        </ng-template>\n        <ng-template [ngIf]=\"column.columnDef === 'actions'\">\n            <mat-header-cell *matHeaderCellDef>{{ column.header }}</mat-header-cell>\n            <mat-cell *matCellDef=\"let row\">\n                <button mat-button *ngFor=\"let action of model.list_actions\">\n                    {{ action }}\n                </button>\n            </mat-cell>\n            </ng-template>\n    </ng-container>\n\n    <mat-header-row *matHeaderRowDef=\"displayColumns\"></mat-header-row>\n    <mat-row  *matRowDef=\"let row; columns: displayColumns;\" [ngClass]=\"{'clickable': mode === 'pick'}\" (click)=\"_picked(row[this.model.external_value_field])\"></mat-row>\n</mat-table>\n\n<mat-paginator #paginator\n    [length]=\"resultsCount\"\n    [pageIndex]=\"searchParams.page - 1\"\n    [pageSize]=\"20\">\n</mat-paginator>`,\n  styles: [`.clickable{color:#00f;cursor:pointer}`],\n  exportAs: 'ngcrudui-listing'\n})\nexport class ListingComponent implements OnChanges {\n\n    @Input('moduleName') moduleName: string;\n    @Input('appName') appName: string;\n    @Input('modelName') modelName: string;\n    @Input() mode = 'normal'; // other modes: 'pick'\n    is_actions_set = false;\n    @Input() forcedSearchParams: any;\n    dataSource = new MatTableDataSource();\n    searchParams = {\n        page: 1,\n    };\n    model: Model;\n    columns = [];\n    displayColumns: string[] = [];\n    resultsCount = 0;\n    isLoading = true;\n    @Output() picked = new EventEmitter();\n\n    constructor(private api: ApiService,\n                private reg: Registry,\n                private route: ActivatedRoute,\n                private router: Router) {}\n\n    ngOnChanges() {\n        if (this.modelName) {\n            this.populateDataTable();\n        }\n   }\n\n    private prepareColumns() {\n        if (this.mode !== 'pick') {\n            this.columns = [{'columnDef': 'checked', 'header': ''}];\n        } else {\n            this.columns = [];\n        }\n        this.model.listing_fields.map(field => {\n            const f = this.model.fields.filter(ff => ff.key === field)[0];\n            const col = {};\n            col['columnDef'] = f.key;\n            col['header'] = f.label;\n            col['cell'] = (element: Element) => `${element[f.key]}`;\n            if (this.model.external_name_field === field) {\n                col['clickable'] = true;\n            }\n            this.columns.push(col);\n        });\n        if (this.mode !== 'pick') {\n            this.columns.push({'columnDef': 'actions', 'header': ''});\n        }\n    }\n\n    private populateDataTable() {\n        this.model = this.reg.getModel(this.moduleName, this.appName, this.modelName);\n        this.prepareColumns();\n        this.displayColumns = this.columns.map(c => c.columnDef);\n        this.resultsCount = 0;\n        this.dataSource.data = [];\n        // this.displayColumns.push('actions');\n        this.searchParams = {page: 1};\n        this.fetch();\n    }\n\n    fetch() {\n        this.api.fetch(this.model.api, this.searchParams).subscribe(res => {\n            let newItems = [];\n            if (res.results) {\n                newItems = this.dataSource.data.concat(res.results);\n            } else {\n                newItems = this.dataSource.data.concat(res);\n            }\n            this.resultsCount = newItems.length;\n            this.dataSource.data = newItems;\n            this.isLoading = false;\n        }, err => {\n            this.isLoading = false;\n        });\n    }\n\n   getLink(id): string[] {\n       return ['/', this.moduleName, this.appName, this.modelName, id];\n   }\n\n   cellClicked(columnName: string, row: any) {\n       if (columnName === this.model.external_name_field) {\n           this.router.navigate(this.getLink(row.id));\n       }\n   }\n\n    onSearch(searchParams) {\n        this.isLoading = true;\n        this.dataSource.data = [];\n        this.resultsCount = 0;\n        this.searchParams = searchParams;\n        this.searchParams.page = 1;\n        this.fetch();\n    }\n\n    onChecked(row) {\n        row['is_checked'] = true;\n    }\n\n    onCheckAll() {\n\n    }\n\n    _picked(value) {\n        this.picked.next(value);\n    }\n\n}\n","import { Component, OnChanges, Input, Output, EventEmitter } from '@angular/core';\nimport { AbstractControl, FormGroup, FormBuilder, FormControl, FormArray } from '@angular/forms';\nimport { DataSource } from '@angular/cdk/collections';\nimport { Observable ,  BehaviorSubject } from 'rxjs';\n\nimport { ApiService } from '../../services/api.service';\nimport { Registry } from '../../services/registry.service';\nimport { Model } from '../../screens';\nimport { FormService } from '../../services/form.service';\nimport { FieldType, Field, AutoCompleteField } from '../../forms';\n\n@Component({\n  selector: 'ng-crud-model-form',\n  template: `<!-- <mat-progress-bar *ngIf=\"isLoading\" mode=\"query\"></mat-progress-bar> -->\n\n<ng-template [ngIf]=\"is_ready\">\n    <!-- <div class=\"form-container\"> -->\n    <div class=\"row\">\n        <ng-container *ngFor=\"let field of fields\">\n            <ng-crud-form-field  [form]=\"form\" [field]=\"field\"></ng-crud-form-field>\n        </ng-container>\n    </div>\n\n\n    <div *ngFor=\"let formarray of formsets; let i=index\">\n        <mat-divider></mat-divider>\n        <ng-crud-formset  [model]=\"model\" [config]=\"model.formsets[i]\"  [formarray]=\"formarray\" [form]=\"form\"></ng-crud-formset>        \n    </div>\n\n    <div class=\"row\">\n        <button mat-raised-button color=\"primary\" class=\"submit-button\" (click)=\"_onSubmit()\">\n            <span *ngIf=\"mode === 'search'\">Search</span>\n            <span *ngIf=\"mode === 'create'\">Create</span>\n            <span *ngIf=\"mode === 'edit'\">Update</span>\n        </button>\n    </div>\n</ng-template>`,\n  styles: [`.row{display:flex;flex:1 1 auto;flex-flow:row wrap}.submit-button{align-self:flex-end}`],\n  exportAs: 'ngcrudui-model-form'\n})\nexport class ModelFormComponent implements OnChanges {\n\n    @Input() moduleName: string;\n    @Input() appName: string;\n    @Input() modelName: string;\n    @Input() mode = 'search';\n    @Input() id: number = null;\n    ngModel: any = {};\n    model: Model;\n    fieldType: typeof FieldType = FieldType;\n    AutoCompleteField: typeof AutoCompleteField = AutoCompleteField;\n    fields: Field[] = [];\n    choices = {};\n    @Output() submit = new EventEmitter<any>();\n    form: FormGroup = new FormGroup({});\n    formset: FormArray = new FormArray([]);\n    formsets: FormArray[] = new Array<FormArray>();\n    is_ready = false;\n\n    constructor(\n        private api: ApiService,\n        private reg: Registry,\n        private formService: FormService,\n    ) {\n\n    }\n\n    ngOnChanges() {\n        if (!this.appName || !this.modelName || !this.moduleName) {\n            return;\n        }\n        this.form = this.reg.forms[this.modelName];\n        console.log(this.form);\n        // this.model = this.reg.getModel(this.moduleName, this.appName, this.modelName);\n        // if (this.mode === 'search') {\n        //     this.fields = this.model.fields.filter((f: Field) => !(f.is_searchable === false));\n        //     this.buildForm(null);\n        // } else if (this.mode === 'edit') {\n        //     // edit mode\n        //     const api = `${this.model.api}${this.id}/`;\n        //     // remove the uneditable fields\n        //     this.fields = this.model.fields.filter(f => {\n        //         return !(f.is_editable === false);\n        //     });\n        //     this.api.fetch(api, {}).subscribe(res => {\n        //         this.buildForm(res);\n        //     });\n        // } else {\n        //     this.buildForm(null);\n        // }\n\n        // // if (this.model.form_type === 'formset') {\n        // //     this.formset = this.formService.toFormArray(this.fields, []);\n        // // } else {\n        // //     this.form = this.formService.toFormGroup(this.fields);\n        // // }\n    }\n\n    _onSubmit() {\n        this.submit.emit(this.form.value);\n    }\n\n    buildForm(values: any) {\n        if (values !== null) {\n            this.fields.map(f => {\n                f._value = values[f.key];\n                return f;\n            });\n        }\n        this.form = this.formService.toFormGroup(this.fields);\n        // Check if the model has formsets, render them beneath the main form\n        if (this.mode !== 'search' && this.model.formsets) {\n            for (const formset of this.model.formsets) {\n                const fs = this.formService.toFormArray(formset.fields, values[formset.key]);\n                this.formsets.push(fs);\n                this.form.addControl(formset.key, fs);\n            }\n        }\n        this.is_ready = true;\n    }\n\n}\n","import { Component, OnInit, Inject } from '@angular/core';\nimport { ActivatedRoute , Router} from '@angular/router';\nimport { MAT_DIALOG_DATA, MatDialogRef } from '@angular/material/dialog';\n\nimport { Registry } from '../../services/registry.service';\n\n@Component({\n  template: `<section class=\"app-settings\" *ngIf=\"modelName\">\n\n  <ng-crud-listing (picked)=\"picked($event)\" [modelName]=\"modelName\" [appName]=\"appName\" [moduleName]=\"moduleName\" mode=\"pick\">\n\n  </ng-crud-listing>\n</section>`,\n  styles: [`#custom-header{padding-top:12px;margin-bottom:12px}.page-title a{color:#333}.mat-tab-nav-bar,mat-tab-nav-bar{border:none!important}.tabs-bar a{color:#fff}`]\n})\nexport class ListingDialogComponent implements OnInit {\n\n    moduleName: string;\n    appName: string;\n    modelName: string;\n\n    constructor(\n      private reg: Registry,\n      private ref: MatDialogRef<ListingDialogComponent>,\n      @Inject(MAT_DIALOG_DATA) public data: any,\n    ) {}\n\n    ngOnInit() {\n      this.moduleName = this.data['moduleName'];\n      this.appName = this.data['appName'];\n      this.modelName = this.data['modelName'];\n    }\n\n    picked(value) {\n      console.log('picked', value);\n      this.ref.close(value);\n    }\n\n}\n","import { Component, OnChanges, Input, SimpleChanges } from '@angular/core';\nimport { FormControl, AbstractControl } from '@angular/forms';\nimport { Observable, of } from 'rxjs';\nimport { map, startWith, debounceTime, distinctUntilChanged, switchMap } from 'rxjs/operators';\nimport { MatDialog } from '@angular/material/dialog';\n\nimport {  Model } from '../../screens';\nimport { Registry } from '../../services/registry.service';\nimport { ApiService } from '../../services/api.service';\nimport { Field } from '../../forms';\nimport { ListingDialogComponent } from '../../containers/listing-dialog/listing-dialog.component';\n\nlet CHOICES = [];\nlet FOREIGN_MODEL;\n\n@Component({\n  selector: 'ng-crud-form-field',\n  template: `<div [ngSwitch]=\"field.control_type\" class=\"form-field-wrapper\" [formGroup]=\"form\">\n\n    <div *ngSwitchCase=\"'switch'\">\n        <mat-slide-toggle matInput [formControlName]=\"field.key\">{{ field.label }}</mat-slide-toggle>\n    </div>\n\n    <mat-form-field *ngSwitchCase=\"'textarea'\">\n        <mat-label>{{ field.label }}</mat-label>\n        <textarea matInput matTextareaAutosize [formControlName]=\"field.key\"\n            [rows]=\"field.rowspan || 1\"></textarea>\n    </mat-form-field>\n\n    <mat-form-field *ngSwitchCase=\"'select'\">\n        <mat-label>{{ field.label }}</mat-label>\n        <mat-select [formControlName]=\"field.key\">\n            <mat-option></mat-option>\n            <mat-option [value]=\"c.value\" *ngFor=\"let c of field.choices\">\n                {{ c.label }}\n            </mat-option>\n        </mat-select>\n    </mat-form-field>\n\n    <mat-form-field *ngSwitchCase=\"'date'\">\n        <mat-label>{{ field.label }}</mat-label>\n        <input  matInput [formControlName]=\"field.key\"  [matDatepicker]=\"myDatepicker\" />\n        <mat-datepicker-toggle matSuffix [for]=\"myDatepicker\"></mat-datepicker-toggle>\n        <mat-datepicker #myDatepicker></mat-datepicker>\n    </mat-form-field>\n    \n    <ng-container *ngSwitchCase=\"'foreign_key'\">\n        <mat-form-field>\n            <mat-label>{{ field.label }}</mat-label>\n            <input type=\"text\" matInput [formControlName]=\"field.key\" [matAutocomplete]=\"auto\">\n        </mat-form-field>\n        <!-- <button mat-icon-button (click)=\"openListingDialog()\"><mat-icon>search</mat-icon></button> -->\n        \n        <mat-autocomplete #auto=\"matAutocomplete\" [displayWith]=\"displayFn\">\n            <mat-option *ngFor=\"let option of filteredOptions | async\" [value]=\"option[foreign_model.external_value_field]\">\n                {{ option[foreign_model.external_name_field] }}\n            </mat-option>\n        </mat-autocomplete>\n    </ng-container>\n\n    <!-- this fallsback from number and text -->\n    <mat-form-field *ngSwitchDefault>\n        <mat-label>{{ field.label }}</mat-label>\n        <input  matInput [formControlName]=\"field.key\"\n                [type]=\"field.control_type || field.value_type || 'text'\" />\n    </mat-form-field>\n\n</div>`,\n  exportAs: 'ngcrudui-form-field',\n  styles: ['.form-field-wrapper{margin-right:  24px}']\n})\nexport class FormFieldComponent implements OnChanges {\n\n  @Input() form: AbstractControl;\n  @Input() forcedSearchParams: any = [];\n  @Input() field: Field;\n  @Input() choices;\n  filteredOptions: Observable<any[]>;\n  foreign_model?: Model;\n  private modelPath: string[] = [];\n\n  constructor(private dialog: MatDialog, private api: ApiService, private reg: Registry) {\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    if (this.field.control_type === 'foreign_key') {\n      console.log('first change', this.choices);\n      const path = this.field.foreign_model_path.split('.');\n      this.modelPath = path;\n      this.foreign_model = this.reg.getModel(path[0], path[1], path[2]);\n      FOREIGN_MODEL = this.foreign_model;\n      if (this.choices) {\n        console.log('found choices');\n        this.filteredOptions = of(this.choices);\n      }\n      // this.api.fetch(`${this.foreign_model.api}`, []).subscribe(res => {\n      //   this.choices = res;\n      //   CHOICES = res;\n      // });\n      const ctrl = this.form.get(this.field.key);\n      this.filteredOptions = ctrl.valueChanges.pipe(\n        startWith(''),\n        debounceTime(200),\n        distinctUntilChanged(),\n        switchMap(val => this._filter(val || null))\n      );\n      // if (this.form.value[this.field.key]) {\n      //   console.log('setting ctrl value', this.form.value[this.field.key]);\n      //   ctrl.setValue(this.form.value[this.field.key]);\n      // }\n    }\n  }\n\n  getFormControl(field_name: string): FormControl {\n    return this.form.get(field_name) as FormControl;\n  }\n\n  displayFn(option) {\n    for (const c of CHOICES) {\n      if (c['id'] === option) {\n        return c[FOREIGN_MODEL['external_name_field']];\n      }\n    }\n    // return option ? option.code : option;\n  }\n\n  _filter(value: string): Observable<any[]> {\n    if (typeof value !== 'string') {\n      return new Observable();\n    }\n    const filterValue = value ? value.toLowerCase() : null;\n    const params = {};\n    params[this.foreign_model.external_name_field] = filterValue;\n    return this.api.fetch(`${this.foreign_model.api}`, params).pipe(\n      map(res => {\n          CHOICES = res;\n          return res;\n      })\n    );\n    // return this.choices.filter(option => option.code.toLowerCase().indexOf(filterValue) === 0);\n  }\n\n  openListingDialog() {\n    const ref = this.dialog.open(ListingDialogComponent, {\n      width: '90%',\n      height: '90%',\n      data: {\n        moduleName: this.modelPath[0],\n        appName: this.modelPath[1],\n        modelName: this.modelPath[2]\n      }\n    });\n    ref.afterClosed().subscribe(value => {\n      this.form.get(this.field.key).setValue(value);\n    });\n  }\n}\n","import { Component, OnChanges, Input, SimpleChanges } from '@angular/core';\nimport { FormGroup, FormArray } from '@angular/forms';\n\nimport {  Model } from '../../screens';\nimport { Registry } from '../../services/registry.service';\nimport { ApiService } from '../../services/api.service';\nimport { FormService } from '../../services/form.service';\nimport { Field } from '../../forms';\n\n@Component({\n  selector: 'ng-crud-formset',\n  template: `<div [formGroup]=\"form\" *ngIf=\"formarray\" class=\"formset\">\n    <div class=\"row\">\n        <h4> {{ config.label }}</h4>\n        <span class=\"spacer\"></span>\n        <button mat-icon-button (click)=\"addForm()\">\n            <mat-icon>add_circle</mat-icon>\n        </button>\n    </div>\n    <div [formArrayName]=\"config.key\">\n        <mat-grid-list gutterSize=\"12\" [cols]=\"config.fields.length\" rowHeight=\"60\"  *ngFor=\"let ctrl of formarray.controls; let i=index\" [formGroupName]=\"i\">\n            <mat-grid-tile  *ngFor=\"let f of config.fields\">\n                {{ f. key }}\n                <ng-crud-form-field [choices]=\"choices[f.key]\" [form]=\"ctrl\" [field]=\"f\"></ng-crud-form-field>\n            </mat-grid-tile>\n        </mat-grid-list>\n    </div>\n</div>`,\n  styles: [`.formset{padding-top:12px}.row{display:flex;flex:1 1 auto}.spacer{flex:1 1 auto}`],\n  exportAs: 'ngcrudui-formset'\n})\nexport class FormsetComponent implements OnChanges {\n\n  @Input() form: FormGroup;\n  @Input() model: Model;\n  @Input() formarray: FormArray;\n  @Input() config: Field;\n  choices = {};\n\n  constructor(private api: ApiService, private reg: Registry, private formService: FormService) {\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    if (changes.config.firstChange) {\n      for (const field of changes.config.currentValue.fields) {\n        if (field['control_type'] === 'foreign_key') {\n          this.getChoices(field);\n        }\n      }\n    }\n  }\n\n  addForm() {\n    const ctrl = this.formService.toFormGroup(this.config.fields);\n    this.formarray.push(ctrl);\n  }\n\n  getChoices(field: Field) {\n    const path = field.foreign_model_path.split('.');\n    const model = this.reg.getModel(path[0], path[1], path[2]);\n    this.api.fetch(model.api, {}).subscribe(res => {\n      this.choices[field.key] = res;\n      console.log(this.choices);\n    });\n  }\n}\n","import { Component, OnChanges, Input } from '@angular/core';\nimport { FormGroup, FormControl } from '@angular/forms';\nimport { Observable, of as observableOf } from 'rxjs';\nimport { startWith, map} from 'rxjs/operators';\n\nimport {  Model } from '../../screens';\nimport { Registry } from '../../services/registry.service';\nimport { ApiService } from '../../services/api.service';\nimport { Field } from '../../forms';\n\n@Component({\n  selector: 'ng-crud-autocomplete',\n  template: `<mat-form-field [formGroup]=\"form\">\n  <input type=\"text\" matInput [placeholder]=\"field.label\" [formControl]=\"ctrl\" [matAutocomplete]=\"auto\">\n  <mat-autocomplete #auto=\"matAutocomplete\" [displayWith]=\"displayWith(foreign_model)\">\n      <mat-option *ngFor=\"let c of filteredOptions | async\" [value]=\"c[foreign_model.external_value_field]\">\n        {{ c[foreign_model.external_name_field] }}\n      </mat-option>\n    </mat-autocomplete>\n</mat-form-field>`,\n  exportAs: 'ngcrudui-autocomplete'\n})\nexport class AutoCompleteFieldComponent implements OnChanges {\n\n  @Input() model: Model;\n  @Input() field: Field;\n  @Input() foreign_model: Model;\n  @Input() form: FormGroup;\n  @Input() choices: any[] = [];\n  @Input() forcedSearchParams: any;\n  dataSource: any[] = new Array();\n  searchParams: {};\n  filteredOptions: Observable<any[]>;\n  ctrl: FormControl;\n\n  constructor(private api: ApiService, private reg: Registry) {\n  }\n\n   ngOnChanges() {\n     if (!this.foreign_model) {\n       return;\n     }\n      this.searchParams = {page: 1};\n      this.ctrl = this.form.get(this.field.key) as FormControl;\n      console.log('foreign key value', this.ctrl.value);\n      this.filteredOptions = observableOf(this.choices);\n      this.filteredOptions = this.ctrl.valueChanges.pipe(\n        startWith(''),\n        map((val: string) => this.filter(val))\n      );\n      // this.api.fetch(this.model.api, this.searchParams).subscribe(res => {\n      //   this.dataSource.push(res['results']);\n      // });\n   }\n\n   filter(text: string): any[] {\n    return this.choices.filter(option => {\n      console.log(text);\n      const val = option[this.foreign_model.external_name_field];\n      return val ? val.toLowerCase().indexOf(text.toLowerCase()) === 0 : false;\n    });\n   }\n\n   valueFormatter(data: any): string {\n      return `(${data[this.model.external_value_field]}) ${data[this.model.external_name_field]}`;\n    }\n\n  displayWith(foreign_model) {\n    return (item: any): string => {\n      return item[foreign_model.external_name_field];\n    };\n  }\n}\n","import { Component, OnChanges, Input } from '@angular/core';\nimport { FormGroup, FormControl } from '@angular/forms';\nimport { Observable } from 'rxjs';\nimport { map, startWith } from 'rxjs/operators';\n\nimport {  Model } from '../../screens';\nimport { Registry } from '../../services/registry.service';\nimport { ApiService } from '../../services/api.service';\nimport { Field } from '../../forms';\n\n@Component({\n  selector: 'ng-crud-foreign-key-field',\n  template: `<mat-form-field>\n    <input type=\"text\" matInput [formControlName]=\"field.key\" [matAutocomplete]=\"auto\">\n</mat-form-field>\n\n<mat-autocomplete #auto=\"matAutocomplete\" [displayWith]=\"displayFn\">\n    <mat-option *ngFor=\"let option of choices\" [value]=\"option[model.external_value_field]\">\n        {{ option[model.external_name_field] }}\n    </mat-option>\n</mat-autocomplete>`\n})\nexport class ForeignKeyFieldComponent implements OnChanges {\n\n  @Input() formGroup: FormGroup;\n  @Input() forcedSearchParams: any = [];\n  @Input() field: Field;\n  choices = [];\n  filteredOptions:  Observable<any[]>;\n  model?: Model;\n\n  constructor(private api: ApiService, private reg: Registry) {\n  }\n\n//   ngOnInit() {\n//   }\n\n  ngOnChanges() {\n    if (!this.formGroup) {\n        return;\n    }\n    console.log(this.formGroup, this.field.key, this.formGroup.get(this.field.key));\n    this.filteredOptions = (this.formGroup.get(this.field.key) as FormControl).valueChanges.pipe(\n        startWith(''),\n        map(value => {\n            console.log(value);\n            return value ? value['code'] : value;\n        }),\n        map(code => code ? this._filter(name) : this.choices.slice())\n    );\n      console.log(this.formGroup);\n      const path = this.field.foreign_model_path.split('.');\n      this.model = this.reg.getModel(path[0], path[1], path[2]);\n      this.api.fetch(`${this.model.api}`, []).subscribe(res => {\n        this.choices = res;\n      });\n  }\n\n  displayFn(option) {\n    return option ? option.code : option;\n  }\n\n  _filter(value: string) {\n    const filterValue = value.toLowerCase();\n    console.log(filterValue);\n\n    return this.choices.filter(option => option.code.toLowerCase().indexOf(filterValue) === 0);\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { HttpClientModule } from '@angular/common/http';\nimport { RouterModule } from '@angular/router';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport { MomentModule } from 'ngx-moment';\n\nimport {\n  MatToolbarModule,\n  MatSidenavModule,\n  MatListModule,\n  MatIconModule,\n  MatTableModule,\n  MatCardModule,\n  MatPaginatorModule,\n  MatButtonModule,\n  MatMenuModule,\n  MatProgressBarModule,\n  MatFormFieldModule,\n  MatInputModule,\n  MatCheckboxModule,\n  MatSlideToggleModule,\n  MatGridListModule,\n  MatSnackBarModule,\n  MatDatepickerModule,\n  MatNativeDateModule,\n  MatSelectModule,\n  MatTabsModule,\n  MatExpansionModule,\n  MatAutocompleteModule,\n} from '@angular/material';\n\n\nimport { ListingComponent } from './components/listing/listing.component';\nimport { ModelFormComponent } from './components/model-form/model-form.component';\nimport { ModelFormScreenComponent } from './components/model-form-screen/model-form-screen.component';\nimport { FormFieldComponent } from './components/form-field/form-field.component';\nimport { FormsetComponent } from './components/formset/formset.component';\nimport { AutoCompleteFieldComponent } from './components/auto-complete-field/auto-complete-field.component';\nimport { ForeignKeyFieldComponent } from './components/foreign-key-field/foreign-key-field.component';\n\nimport { AppScreenComponent } from './containers/app-screen/app-screen.component';\nimport { ListingScreenComponent } from './containers/listing-screen/listing-screen.component';\nimport { ListingDialogComponent } from './containers/listing-dialog/listing-dialog.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    FormsModule,\n    ReactiveFormsModule,\n    HttpClientModule,\n    MomentModule,\n    RouterModule,\n    //\n    MatToolbarModule,\n    MatSidenavModule,\n    MatListModule,\n    MatIconModule,\n    MatTableModule,\n    MatCardModule,\n    MatPaginatorModule,\n    MatButtonModule,\n    MatMenuModule,\n    MatProgressBarModule,\n    MatFormFieldModule,\n    MatInputModule,\n    MatCheckboxModule,\n    MatSlideToggleModule,\n    MatGridListModule,\n    MatSnackBarModule,\n    MatDatepickerModule,\n    MatNativeDateModule,\n    MatSelectModule,\n    MatTabsModule,\n    MatExpansionModule,\n    MatAutocompleteModule,\n  ],\n  declarations: [\n    FormFieldComponent,\n    AutoCompleteFieldComponent,\n    ListingComponent,\n    ModelFormComponent,\n    AppScreenComponent,\n    ListingScreenComponent,\n    ModelFormScreenComponent,\n    FormsetComponent,\n    ForeignKeyFieldComponent,\n    ListingDialogComponent,\n  ],\n  providers: [\n  ],\n  exports: [\n    HttpClientModule,\n    AutoCompleteFieldComponent,\n    MatToolbarModule,\n    MatSidenavModule,\n    MatListModule,\n    MatIconModule,\n    MatTableModule,\n    MatCardModule,\n    MatPaginatorModule,\n    MatButtonModule,\n    MatMenuModule,\n    MatProgressBarModule,\n    MatFormFieldModule,\n    MatInputModule,\n    MatCheckboxModule,\n    MatSlideToggleModule,\n    MatGridListModule,\n    MatSnackBarModule,\n    MatNativeDateModule,\n    MatDatepickerModule,\n    MatSelectModule,\n    MatTabsModule,\n    MatAutocompleteModule,\n    MatExpansionModule,\n    FormFieldComponent,\n    ListingComponent,\n    ModelFormComponent,\n    AppScreenComponent,\n    ListingScreenComponent,\n    ModelFormScreenComponent,\n    FormsetComponent,\n    ForeignKeyFieldComponent,\n  ],\n  entryComponents: [\n    ListingDialogComponent\n  ]\n})\nexport class CrudModule { }\n"],"names":["tslib_1.__values","tslib_1.__extends","observableOf"],"mappings":"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"}
